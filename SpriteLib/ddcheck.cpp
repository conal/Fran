// Check for ddraw errors

#include "StdAfx.h"
#include "ddcheck.h"

// borrowed from lbprintf.c.  Generalized and added DSound support.
typedef struct
{
    HRESULT     rval;
    LPSTR       str;
} ERRLIST;

static ERRLIST ddrawErrors[] =
{
    { DD_OK, "DD_OK" },
    { DDERR_ALREADYINITIALIZED, "DDERR_ALREADYINITIALIZED" },
    { DDERR_CANNOTATTACHSURFACE, "DDERR_CANNOTATTACHSURFACE" },
    { DDERR_CANNOTDETACHSURFACE, "DDERR_CANNOTDETACHSURFACE" },
    { DDERR_CURRENTLYNOTAVAIL, "DDERR_CURRENTLYNOTAVAIL" },
    { DDERR_EXCEPTION, "DDERR_EXCEPTION" },
    { DDERR_GENERIC, "DDERR_GENERIC" },
    { DDERR_HEIGHTALIGN, "DDERR_HEIGHTALIGN" },
    { DDERR_INCOMPATIBLEPRIMARY, "DDERR_INCOMPATIBLEPRIMARY" },
    { DDERR_INVALIDCAPS, "DDERR_INVALIDCAPS" },
    { DDERR_INVALIDCLIPLIST, "DDERR_INVALIDCLIPLIST" },
    { DDERR_INVALIDMODE, "DDERR_INVALIDMODE" },
    { DDERR_INVALIDOBJECT, "DDERR_INVALIDOBJECT" },
    { DDERR_INVALIDPARAMS, "DDERR_INVALIDPARAMS" },
    { DDERR_INVALIDPIXELFORMAT, "DDERR_INVALIDPIXELFORMAT" },
    { DDERR_INVALIDRECT, "DDERR_INVALIDRECT" },
    { DDERR_LOCKEDSURFACES, "DDERR_LOCKEDSURFACES" },
    { DDERR_NO3D, "DDERR_NO3D" },
    { DDERR_NOALPHAHW, "DDERR_NOALPHAHW" },
    { DDERR_NOCLIPLIST, "DDERR_NOCLIPLIST" },
    { DDERR_NOCOLORCONVHW, "DDERR_NOCOLORCONVHW" },
    { DDERR_NOCOOPERATIVELEVELSET, "DDERR_NOCOOPERATIVELEVELSET" },
    { DDERR_NOCOLORKEY, "DDERR_NOCOLORKEY" },
    { DDERR_NOCOLORKEYHW, "DDERR_NOCOLORKEYHW" },
    { DDERR_NOEXCLUSIVEMODE, "DDERR_NOEXCLUSIVEMODE" },
    { DDERR_NOFLIPHW, "DDERR_NOFLIPHW" },
    { DDERR_NOGDI, "DDERR_NOGDI" },
    { DDERR_NOMIRRORHW, "DDERR_NOMIRRORHW" },
    { DDERR_NOTFOUND, "DDERR_NOTFOUND" },
    { DDERR_NOOVERLAYHW, "DDERR_NOOVERLAYHW" },
    { DDERR_NORASTEROPHW, "DDERR_NORASTEROPHW" },
    { DDERR_NOROTATIONHW, "DDERR_NOROTATIONHW" },
    { DDERR_NOSTRETCHHW, "DDERR_NOSTRETCHHW" },
    { DDERR_NOT4BITCOLOR, "DDERR_NOT4BITCOLOR" },
    { DDERR_NOT4BITCOLORINDEX, "DDERR_NOT4BITCOLORINDEX" },
    { DDERR_NOT8BITCOLOR, "DDERR_NOT8BITCOLOR" },
    { DDERR_NOTEXTUREHW, "DDERR_NOTEXTUREHW" },
    { DDERR_NOVSYNCHW, "DDERR_NOVSYNCHW" },
    { DDERR_NOZBUFFERHW, "DDERR_NOZBUFFERHW" },
    { DDERR_NOZOVERLAYHW, "DDERR_NOZOVERLAYHW" },
    { DDERR_OUTOFCAPS, "DDERR_OUTOFCAPS" },
    { DDERR_OUTOFMEMORY, "DDERR_OUTOFMEMORY" },
    { DDERR_OUTOFVIDEOMEMORY, "DDERR_OUTOFVIDEOMEMORY" },
    { DDERR_OVERLAYCANTCLIP, "DDERR_OVERLAYCANTCLIP" },
    { DDERR_OVERLAYCOLORKEYONLYONEACTIVE, "DDERR_OVERLAYCOLORKEYONLYONEACTIVE" },
    { DDERR_PALETTEBUSY, "DDERR_PALETTEBUSY" },
    { DDERR_COLORKEYNOTSET, "DDERR_COLORKEYNOTSET" },
    { DDERR_SURFACEALREADYATTACHED, "DDERR_SURFACEALREADYATTACHED" },
    { DDERR_SURFACEALREADYDEPENDENT, "DDERR_SURFACEALREADYDEPENDENT" },
    { DDERR_SURFACEBUSY, "DDERR_SURFACEBUSY" },
    { DDERR_SURFACEISOBSCURED, "DDERR_SURFACEISOBSCURED" },
    { DDERR_SURFACELOST, "DDERR_SURFACELOST" },
    { DDERR_SURFACENOTATTACHED, "DDERR_SURFACENOTATTACHED" },
    { DDERR_TOOBIGHEIGHT, "DDERR_TOOBIGHEIGHT" },
    { DDERR_TOOBIGSIZE, "DDERR_TOOBIGSIZE" },
    { DDERR_TOOBIGWIDTH, "DDERR_TOOBIGWIDTH" },
    { DDERR_UNSUPPORTED, "DDERR_UNSUPPORTED" },
    { DDERR_UNSUPPORTEDFORMAT, "DDERR_UNSUPPORTEDFORMAT" },
    { DDERR_UNSUPPORTEDMASK, "DDERR_UNSUPPORTEDMASK" },
    { DDERR_VERTICALBLANKINPROGRESS, "DDERR_VERTICALBLANKINPROGRESS" },
    { DDERR_WASSTILLDRAWING, "DDERR_WASSTILLDRAWING" },
    { DDERR_XALIGN, "DDERR_XALIGN" },
    { DDERR_INVALIDDIRECTDRAWGUID, "DDERR_INVALIDDIRECTDRAWGUID" },
    { DDERR_DIRECTDRAWALREADYCREATED, "DDERR_DIRECTDRAWALREADYCREATED" },
    { DDERR_NODIRECTDRAWHW, "DDERR_NODIRECTDRAWHW" },
    { DDERR_PRIMARYSURFACEALREADYEXISTS, "DDERR_PRIMARYSURFACEALREADYEXISTS" },
    { DDERR_NOEMULATION, "DDERR_NOEMULATION" },
    { DDERR_REGIONTOOSMALL, "DDERR_REGIONTOOSMALL" },
    { DDERR_CLIPPERISUSINGHWND, "DDERR_CLIPPERISUSINGHWND" },
    { DDERR_NOCLIPPERATTACHED, "DDERR_NOCLIPPERATTACHED" },
    { DDERR_NOHWND, "DDERR_NOHWND" },
    { DDERR_HWNDSUBCLASSED, "DDERR_HWNDSUBCLASSED" },
    { DDERR_HWNDALREADYSET, "DDERR_HWNDALREADYSET" },
    { DDERR_NOPALETTEATTACHED, "DDERR_NOPALETTEATTACHED" },
    { DDERR_NOPALETTEHW, "DDERR_NOPALETTEHW" },
    { DDERR_BLTFASTCANTCLIP, "DDERR_BLTFASTCANTCLIP" },
    { DDERR_NOBLTHW, "DDERR_NOBLTHW" },
    { DDERR_NODDROPSHW, "DDERR_NODDROPSHW" },
    { DDERR_OVERLAYNOTVISIBLE, "DDERR_OVERLAYNOTVISIBLE" },
    { DDERR_NOOVERLAYDEST, "DDERR_NOOVERLAYDEST" },
    { DDERR_INVALIDPOSITION, "DDERR_INVALIDPOSITION" },
    { DDERR_NOTAOVERLAYSURFACE, "DDERR_NOTAOVERLAYSURFACE" },
    { DDERR_EXCLUSIVEMODEALREADYSET, "DDERR_EXCLUSIVEMODEALREADYSET" },
    { DDERR_NOTFLIPPABLE, "DDERR_NOTFLIPPABLE" },
    { DDERR_CANTDUPLICATE, "DDERR_CANTDUPLICATE" },
    { DDERR_NOTLOCKED, "DDERR_NOTLOCKED" },
    { DDERR_CANTCREATEDC, "DDERR_CANTCREATEDC" },
    { DDERR_NODC, "DDERR_NODC" },
    { DDERR_WRONGMODE, "DDERR_WRONGMODE" },
    { DDERR_IMPLICITLYCREATED, "DDERR_IMPLICITLYCREATED" },
};
const int numDDrawErrors = sizeof( ddrawErrors )/sizeof( ddrawErrors[0] );


static ERRLIST dsoundErrors[] =
{
    { DS_OK, "DS_OK"},
    { DSERR_ALLOCATED, "DSERR_ALLOCATED" },
    { DSERR_CONTROLUNAVAIL, "DSERR_CONTROLUNAVAIL" },
    { DSERR_INVALIDPARAM, "DSERR_INVALIDPARAM" },
    { DSERR_INVALIDCALL, "DSERR_INVALIDCALL" },
    { DSERR_GENERIC, "DSERR_GENERIC" },
    { DSERR_PRIOLEVELNEEDED, "DSERR_PRIOLEVELNEEDED" },
    { DSERR_OUTOFMEMORY, "DSERR_OUTOFMEMORY" },
    { DSERR_BADFORMAT, "DSERR_BADFORMAT" },
    { DSERR_UNSUPPORTED, "DSERR_UNSUPPORTED" },
    { DSERR_NODRIVER, "DSERR_NODRIVER" },
    { DSERR_ALREADYINITIALIZED, "DSERR_ALREADYINITIALIZED" },
    { DSERR_NOAGGREGATION, "DSERR_NOAGGREGATION" },
    { DSERR_BUFFERLOST, "DSERR_BUFFERLOST" },
    { DSERR_OTHERAPPHASPRIO, "DSERR_OTHERAPPHASPRIO" },
    { DSERR_UNINITIALIZED, "DSERR_UNINITIALIZED" },
};
const int numDSoundErrors = sizeof( dsoundErrors )/sizeof( dsoundErrors[0] );

static ERRLIST d3drmErrors[] =
{
    { D3DRM_OK, "D3DRM_OK" },
    { D3DRMERR_BADOBJECT, "D3DRMERR_BADOBJECT" },
    { D3DRMERR_BADTYPE, "D3DRMERR_BADTYPE" },
    { D3DRMERR_BADALLOC, "D3DRMERR_BADALLOC" },
    { D3DRMERR_FACEUSED, "D3DRMERR_FACEUSED" },
    { D3DRMERR_NOTFOUND, "D3DRMERR_NOTFOUND" },
    { D3DRMERR_NOTDONEYET, "D3DRMERR_NOTDONEYET" },
    { D3DRMERR_FILENOTFOUND, "D3DRMERR_FILENOTFOUND" },
    { D3DRMERR_BADFILE, "D3DRMERR_BADFILE" },
    { D3DRMERR_BADDEVICE, "D3DRMERR_BADDEVICE" },
    { D3DRMERR_BADVALUE, "D3DRMERR_BADVALUE" },
    { D3DRMERR_BADMAJORVERSION, "D3DRMERR_BADMAJORVERSION" },
    { D3DRMERR_BADMINORVERSION, "D3DRMERR_BADMINORVERSION" },
    { D3DRMERR_UNABLETOEXECUTE, "D3DRMERR_UNABLETOEXECUTE" },
};
const int numD3drmErrors = sizeof( d3drmErrors )/sizeof( d3drmErrors[0] );

/*
 * getErrorString
 */
static LPSTR getErrorString( ERRLIST elErrors[], int numErrors, HRESULT retval )
{
    for (int i=0;i<numErrors;i++ )
        if (retval == elErrors[i].rval )
            return elErrors[i].str;
    return "Unknown Error Code";
}

// Check the result of a DirectX operation, and throw an exception if it's not
// "OK"

void dxcheck (ERRLIST elErrors[], int numErrors, HRESULT okVal, HRESULT retval)
{
    if (retval == okVal) return;

    // This next line helps us in the debugger.
    char *errString = getErrorString(elErrors, numErrors, retval);
    AfxMessageBox(errString);
    ASSERT(FALSE);
}

EXT_API(void) ddcheck (HRESULT retval)
{ dxcheck (ddrawErrors, numDDrawErrors, DD_OK, retval); }

EXT_API(void) dscheck (HRESULT retval)
{ dxcheck (dsoundErrors, numDSoundErrors, DS_OK, retval); }

EXT_API(void) d3check (HRESULT retval)
{ dxcheck (d3drmErrors, numD3drmErrors, D3DRM_OK, retval); }
