;;; Fran names and types.  For use with haskell-docs, which my be found at
;;; http://www.haskell.org/haskell-mode/.
;;; 
;;; These functions are derived from UsersMan.htm, but I need to be more
;;; systematic.
;;;
;;; Deposit this file in a directory on your load-path and add the
;;; following line to your _emacs:
;;; 
;;;   (require 'fran)
;;;
;;; Alternatively, load it directly from your Fran installation.  For
;;; instance, I have the following in my _emacs:
;;; 
;;;   (load-library "c:/Users/Conal/Fran/docs/fran")

(require 'haskell-doc)

(setq haskell-doc-show-user-defined t)

(defvar fran-doc-ids
  '(("wiggle" . "Behavior Double")
    ("waggle" . "Behavior Double")
    ("time" . "TimeB")
    ("neverE" . "Event a")
    ("constE" . "Time -> a -> Event a")
    ("timeIs" . "Time -> Event ()")
    ("alarmE" . "Time -> Time -> Event ()")
    ("untilB" . "GBehavior bv => bv -> Event bv -> bv")
    ("-=>" . "Event a ->       b  -> Event b")
    ("==>" . "Event a -> (a -> b) -> Event b")
    (".|." . "Event a -> Event a -> Event a")
    ("anyE" . "[Event a] -> Event a")
    ("handleE" . "Event a -> (Time -> a -> Event a -> b) -> Event b")
    ("==>" . "Event a -> (a -> b) -> Event b")
    ("-=>" . "Event a -> b -> Event b")
    ("withRestE" . "Event a -> Event (a, Event a)")
    ("withTimeE" . "Event a -> Event (a, Time)")
    ("withRestE_" . "Event a -> Event (Event a)")
    ("withTimeE" . "Event a -> Event (a, Time)")
    ("nextE" . "Event a -> Event (Event a)")
    ("withElemE" . "Event a -> [b] -> Event (a,b)")
    ("withElemE_" . "Event a -> [b] -> Event b")
    ("switcher" . "GBehavior bv => bv -> Event bv -> bv")
    ("accumB" . "GBehavior bv => (bv -> b -> bv) -> bv -> Event b -> bv")
    ("mapSwitcher" . "GBehavior b => (a -> b) -> a -> Event a -> b")
    ("stepper" . "a -> Event a -> Behavior a")
    ("stepAccum" . "a -> Event (a -> a) -> Behavior a")
    ("filterE" . "Event a -> (a -> Maybe b) -> Event b")
    ("suchThat" . "Event a -> (a -> Bool) -> Event a")
    ("lbp" . "User -> Event ()")
    ("rbp" . "User -> Event ()")
    ("lbr" . "User -> Event ()")
    ("rbr" . "User -> Event ()")
    ("keyPressAny" . "User -> Event VKey")
    ("keyPress" . "VKey -> User -> Event ()")
    ("keyReleaseAny" . "User -> Event VKey")
    ("keyRelease" . "VKey -> User -> Event ()")
    ("charPress" . "User -> Event Char")
    ("charPressAny" . "Char -> User -> Event ()")
    ("resize" . "User -> Event Vector2")
    ("viewSize" . "User -> Vector2B")
    ("mouseMove" . "User -> Event Point2")
    ("mouse" . "User -> Point2B")
    ("mouseMotion" . "User -> Vector2B")
    ("stylusPresent" . "User -> Bool")
    ("stylusMove" . "User -> Event Point2")
    ("stylusPressureChange" . "User -> Event Double")
    ("stylusButton" . "User -> Event Bool")
    ("stylusDown" . "User -> Event ()")
    ("stylusUp" . "User -> Event ()")
    ("stylus" . "User -> Point2B")
    ("stylusMotion" . "User -> Vector2B")
    ("stylusPressure" . "User -> RealB")
    ("updateDone" . "User -> Event Time")
    ("updatePeriod" . "User -> TimeB")
    ("userTime" . "User -> TimeB")
    ("userTimeIs" . "Time -> User -> Event ()")
    ("integral" . "(VectorSpace v) => Behavior v -> User -> Behavior v")
    ("atRate" . "(VectorSpace v) => Behavior v -> User -> Behavior v")
    ("snapshot" . "Event a -> Behavior b -> Event (a, b)")
    ("snapshot_" . "Event a -> Behavior b -> Event b")
    ("whenSnap" . "Event a -> Behavior b -> (a -> b -> Bool) -> Event a")
    ("whenE" . "Event a -> Behavior Bool -> Event a")
    ("predicate" . "Behavior Bool -> User -> Event User")
    ("sumE" . "Num a => Event a -> Behavior a")
    ("timeTransform" . "GBehavior bv => bv -> Behavior Time -> bv")
    ("later" . "GBehavior bv => TimeB -> bv -> bv")
    ("earlier" . "GBehavior bv => TimeB -> bv -> bv")
    ("faster" . "GBehavior bv => TimeB -> bv -> bv")
    ("slower" . "GBehavior bv => TimeB -> bv -> bv")
    ("afterE" . "GBehavior bv => Event a -> bv -> Event (a, bv) ")
    ("afterE_" . "GBehavior bv => Event a -> bv -> Event bv")
    ("repeatE" . "GBehavior bv => Event bv -> Event bv")
    ("scanlE" . "(a -> b -> a) -> a -> Event b -> Event a")
    ("accumE" . "a -> Event (a -> a) -> Event a")
    ("countE" . "Event a -> Behavior Int")
    ("withPrevE" . "Event a -> a -> Event (a,a)")
    ("withPrevE_" . "Event a -> a -> Event a")
    ("timeSince" . "Time -> Behavior DTime")
    ("accumB" . "GBehavior bv => (bv -> b -> bv) -> bv -> Event b -> bv")
    ("nextUser" . "(User -> Event a) -> User -> Event (a,User)")
    ("nextUser_" . "(User -> Event a) -> User -> Event User")
    ("leftButton" . "User -> BoolB")
    ("rightButton" . "User -> BoolB")
    ("traceE" . "Show a => String -> TraceEFlag -> Event a -> Event a")
    ("&&" . "Bool -> Bool -> Bool")
    ("&&*" . "BoolB -> BoolB -> BoolB")
    ("fromInteger" . "Num a => Integer -> (Behavior a)")
    (">" . "Behavior a -> Behavior a -> Bool")
    ("constantB" . "a -> Behavior a")
    ("$*" . "Behavior (a -> b) -> Behavior a -> Behavior b")
    ("lift0" . "a -> Behavior a")
    ("lift1" . "(a -> b) -> Behavior a -> Behavior b")
    ("lift2" . "(a -> b -> c) -> Behavior a -> Behavior b -> Behavior c")
    ("lift3" . "(a -> b -> c -> d)")
    ("fromIntegerB" . "Num a => IntegerB -> Behavior a")
    ("toRationalB" . "Real a => Behavior a -> Behavior Rational")
    ("toIntegerB" . "Integral a => Behavior a -> IntegerB")
    ("evenB" . "Integral a => Behavior a -> BoolB")
    ("oddB" . "Integral a => Behavior a -> BoolB")
    ("toIntB" . "Integral a => Behavior a -> IntB")
    ("properFractionB" . "(RealFrac a, Integral b) => Behavior a -> Behavior (b,a)")
    ("truncateB" . "(RealFrac a, Integral b) => Behavior a -> Behavior b")
    ("roundB" . "(RealFrac a, Integral b) => Behavior a -> Behavior b")
    ("ceilingB" . "(RealFrac a, Integral b) => Behavior a -> Behavior b")
    ("floorB" . "(RealFrac a, Integral b) => Behavior a -> Behavior b")
    ("^*" . "(Num a, Integral b) =>")
    ("^^*" . "(Fractional a, Integral b) =>")
    ("==*" . "Eq a => Behavior a -> Behavior a -> BoolB")
    ("/=*" . "Eq a => Behavior a -> Behavior a -> BoolB")
    ("<*" . "Ord a => Behavior a -> Behavior a -> BoolB")
    ("<=*" . "Ord a => Behavior a -> Behavior a -> BoolB")
    (">=*" . "Ord a => Behavior a -> Behavior a -> BoolB")
    (">*" . "Ord a => Behavior a -> Behavior a -> BoolB")
    ("cond" . "BoolB -> Behavior a -> Behavior a -> Behavior a")
    ("notB" . "BoolB -> BoolB")
    ("&&*" . "BoolB -> BoolB -> BoolB")
    ("||*" . "BoolB -> BoolB -> BoolB")
    ("pairB" . "Behavior a -> Behavior b -> Behavior (a,b)")
    ("fstB" . "Behavior (a,b) -> Behavior a")
    ("sndB" . "Behavior (a,b) -> Behavior b")
    ("pairBSplit" . "Behavior (a,b) -> (Behavior a, Behavior b)")
    ("showB" . "(Show a) => Behavior a -> Behavior String")
    ("nilB" . "Behavior [a]")
    ("consB" . "Behavior a -> Behavior [b] -> Behavior [b] ")
    ("headB" . "Behavior [a] -> Behavior a ")
    ("tailB" . "Behavior [a] -> Behavior [a] ")
    ("nullB" . "Behavior [a] -> BoolB")
    ("!!*" . "Behavior [a] -> IntB -> Behavior a")
    ("bListToListB" . "[Behavior a] -> Behavior [a]")
    ("liftL" . "([a] -> b) -> ([Behavior a] -> Behavior b)")
    ("origin2" . "Point2B")
    ("point2XY" . "RealB -> RealB -> Point2B")
    ("point2Polar" . "LengthB  -> RadiansB -> Point2B")
    ("point2XYCoords" . "Point2B  -> (RealB,")
    ("point2PolarCoords" . "Point2B  -> (RealB,")
    ("distance2" . "Point2B  -> Point2B  -> LengthB ")
    ("distance2Squared" . "Point2B  -> Point2B  -> LengthB ")
    ("linearInterpolate2" . "Point2B  -> Point2B  -> RealB -> Point2B")
    (".+^" . "Point2B  -> Vector2B -> Point2B ")
    (".-^" . "Point2B  -> Vector2B -> Point2B ")
    (".-." . "Point2B  -> Point2B  -> Vector2B")
    ("origin3" . "Point3B")
    ("point3XYZ" . "RealB -> RealB -> RealB -> Point3B")
    ("point3XYZCoords" . "Point3B  -> (RealB,")
    ("distance3" . "Point3B  -> Point3B  -> LengthB ")
    ("distance3Squared" . "Point3B  -> Point3B  -> LengthB ")
    ("linearInterpolate3" . "Point3B  -> Point3B  -> RealB -> Point3B")
    (".+^#" . "Point3B  -> Vector3B -> Point3B ")
    (".-^#" . "Point3B  -> Vector3B -> Point3B ")
    (".-.#" . "Point3B  -> Point3B  -> Vector3B")
    ("xVector2" . "Vector2B  -- unit vectors")
    ("yVector2" . "Vector2B  -- unit vectors")
    ("vector2XY" . "RealB -> RealB -> Vector2B")
    ("vector2Polar" . "RealB -> RealB -> Vector2B")
    ("vector2XYCoords" . "Vector2B -> (RealB, RealB)")
    ("vector2PolarCoords" . "Vector2B -> (RealB, RealB) ")
    ("xVector3" . "Vector3B  -- unit vector")
    ("yVector3" . "Vector3B  -- unit vector")
    ("zVector3" . "Vector3B  -- unit vector")
    ("vector3XYZ" . "RealB -> RealB -> RealB -> Vector3B")
    ("vector3XYZCoords" . "Vector3B -> (RealB, RealB, RealB)")
    ("vector3Spherical" . "RealB -> RealB -> RealB -> Vector3B")
    ("vector3PolarCoords" . "Vector3B -> (RealB, RealB, RealB)")
    ("zeroVector" . "VectorSpace v => Behavior v")
    ("*^" . "VectorSpace v => ScalarB -> Behavior v -> Behavior v")
    ("^/" . "VectorSpace v => Behavior v -> ScalarB -> Behavior v")
    ("^+^" . "VectorSpace v => Behavior v -> Behavior v -> Behavior v")
    ("^-^" . "VectorSpace v => Behavior v -> Behavior v -> Behavior v")
    ("dot" . "VectorSpace v => Behavior v -> Behavior v -> ScalarB")
    ("magnitude" . "VectorSpace v => Behavior v -> ScalarB")
    ("magnitudeSquared" . "VectorSpace v => Behavior v -> ScalarB")
    ("normalize" . "VectorSpace v => Behavior v -> Behavior v")
    ("*%" . "Transform2B -> a -> a  -- Applies a transform")
    ("identity2" . "Transform2B")
    ("translate2" . "Vector2B -> Transform2B")
    ("rotate2" . "RealB -> Transform2B")
    ("compose2" . "Transform2B -> Transform2B -> Transform2B")
    ("inverse2" . "Transform2B -> Transform2B")
    ("uscale2" . "RealB -> Transform2B  -- only uniform scaling")
    ("identity3" . "Transform3B")
    ("translate3" . "Vector3B -> Transform3B")
    ("rotate3" . "Vector3B -> RealB -> Transform3B")
    ("scale3" . "Vector3B -> Transform3B")
    ("compose3" . "Transform3B -> Transform3B -> Transform3B")
    ("uscale3" . "RealB -> Transform3B")
    ("**%" . "Transform3B -> a -> a ")
    ("system" . "Font")
    ("timesRoman" . "Font")
    ("courier" . "Font")
    ("arial" . "Font")
    ("symbol" . "Font")
    ("bold" . "Font -> Font")
    ("italic" . "Font -> Font")
    ("simpleText" . "StringB -> TextB")
    ("boldT" . "TextB -> TextB")
    ("italicT" . "TextB -> TextB")
    ("textFont" . "Font  -> TextB -> TextB")
    ("colorRGB" . "RealB -> RealB -> RealB  -> ColorB")
    ("colorHSL" . "RealB -> RealB -> RealB  -> ColorB")
    ("colorRGBCoords" . "ColorB -> (RealB, RealB, RealB) ")
    ("colorHSLCoords" . "ColorB -> (RealB, RealB, RealB)")
    ("interpolateColorRGB" . "ColorB -> ColorB -> RealB -> ColorB")
    ("interpolateColorHSL" . "ColorB -> ColorB -> RealB -> ColorB")
    ("grey" . "FractionB -> ColorB")
    ("stronger" . "FractionB -> ColorB -> ColorB")
    ("duller" . "FractionB -> ColorB -> ColorB")
    ("darker" . "FractionB -> ColorB -> ColorB")
    ("brighter" . "FractionB -> ColorB -> ColorB")
    ("shade" . "FractionB -> ColorB -> ColorB")
    ("white" . "ColorB")
    ("black" . "ColorB")
    ("red" . "ColorB")
    ("green" . "ColorB")
    ("blue" . "ColorB")
    ("lightBlue" . "ColorB")
    ("royalBlue" . "ColorB")
    ("yellow" . "ColorB")
    ("brown" . "ColorB")
    ("asColorRef" . "ColorB -> Win32.COLORREF ")
    ("colorRGB256" . "IntB -> IntB -> IntB -> ColorB")
    ("emptyImage" . "ImageB")
    ("solidImage" . "ImageB")
    ("flipImage" . "HFlipBook -> RealB -> ImageB")
    ("soundImage" . "SoundB -> ImageB")
    ("over" . "ImageB -> ImageB -> ImageB")
    ("overs" . "[ImageB] -> ImageB")
    ("withColor" . "ColorB -> ImageB -> ImageB")
    ("crop" . "RectB -> ImageB -> ImageB")
    ("line" . "Point2B -> Point2B -> ImageB")
    ("circle" . "ImageB")
    ("polygon" . "[Point2B] -> ImageB")
    ("polyline" . "[Point2B] -> ImageB")
    ("polyBezier" . "[Point2B] -> ImageB")
    ("polygonB" . "Behavior [Point2] -> ImageB")
    ("polylineB" . "Behavior [Point2] -> ImageB")
    ("polyBezierB" . "Behavior [Point2] -> ImageB")
    ("bezier" . "Point2B -> Point2B -> Point2B -> Point2B -> ImageB")
    ("textImage" . "TextB -> ImageB")
    ("importBitmap" . "String -> ImageB")
    ("importBitmapWithSize" . "String -> (ImageB, RealVal, RealVal)")
    ("rectFromCorners" . "Point2B -> Point2B  -> RectB")
    ("rectFromCenterSize" . "Point2B -> Vector2B -> RectB")
    ("intersectRect" . "RectB -> RectB -> RectB")
    ("expandRect" . "RealB   -> RectB    -> RectB")
    ("rectLL" . "RectB -> Point2B")
    ("rectUR" . "RectB -> Point2B")
    ("rectLR" . "RectB -> Point2B")
    ("rectUL" . "RectB -> Point2B")
    ("rectCenter" . "RectB -> Point2B")
    ("rectSize" . "RectB -> Vector2B")
    ("rectContains" . "RectB   -> Point2B  -> BoolB")
    ("flipBook" . "HDDSurface -> Pixels -> Pixels -> Pixels -> Pixels")
    ("bitmapDDSurface" . "String -> HDDSurface")
    ("importBitmap" . "String -> ImageB")
    ("importBitmapWithSize" . "String -> (ImageB, RealVal, RealVal)")
    ("importFlipBook" . "String -> Int -> Int -> HFlipBook")
    ("parseFlipBooks" . "[(Int, Int)] -> Pixels -> HDDSurface -> [HFlipBook] ")
    ("star" . "IntB -> IntB -> ImageB")
    ("regularPolygon" . "IntB -> ImageB")
    ("circle" . "ImageB")
    ("square" . "ImageB")
    ("move" . "Transformable2B a => Vector2B -> a -> a")
    ("moveXY" . "Transformable2B a => RealB -> RealB -> a -> a")
    ("moveTo" . "Transformable2B bv => Point2B -> bv -> bv")
    ("stretch" . "RealB -> ImageB -> ImageB")
    ("turnLeft" . "Transformable2B a => FractionB -> a -> a")
    ("turnRight" . "Transformable2B a => FractionB -> a -> a")
    ("stringBIm" . "StringB -> ImageB")
    ("showBIm" . "Show a => Behavior a -> ImageB")
    ("showIm" . "Show a =>          a -> ImageB")
    ("viewStretch" . "Vector2B -> User -> ImageB -> ImageB ")
    ("emptyG" . "GeometryB")
    ("unionG" . "GeometryB -> GeometryB -> GeometryB")
    ("withColorG" . "ColorB -> GeometryB -> GeometryB")
    ("ambientLightG" . "GeometryB")
    ("pointLightG" . "GeometryB")
    ("spotLightG" . "GeometryB")
    ("directionalLightG" . "GeometryB")
    ("parallelPointLightG" . "GeometryB")
    ("importX" . "String -> GeometryB")
    ("move3" . "Vector3B -> GeometryB -> GeometryB")
    ("moveXYZ" . "RealB -> RealB -> RealB -> GeometryB -> GeometryB")
    ("moveTo3" . "Point3B -> GeometryB -> GeometryB")
    ("stretch3" . "RealB -> GeometryB -> GeometryB")
    ("turn3" . "Transformable3B a => Vector3B -> RealB -> a -> a")
    ("importWave" . "String -> Bool -> SoundB ")
    ("silence" . "SoundB")
    ("mix" . "SoundB -> SoundB -> SoundB")
    ("volume" . "RealB -> SoundB -> SoundB  -- multiply intensity")
    ("pitch" . "RealB -> SoundB -> SoundB  -- multiply pitch")
    ("pan" . "RealB -> SoundB -> SoundB  -- Pan, in dB. May change")
    ("displayEx" . "(User -> (ImageB, Win32.HWND -> Event (IO ())))")
    ("eventLoops" . "[Win32.HWND] -> IO ()")
    ("eventLoop" . "Win32.HWND  -> IO ()")
    ("displayUs" . "[User -> ImageB] -> IO ()")
    ("displayU" . "(User -> ImageB) -> IO ()")
    ("userDelay" . "GBehavior bv => bv -> User -> bv")
    ("displays" . "[ImageB] -> IO ()")
    ("display" . "ImageB -> IO ()")
    ("displayGs" . "[GeometryB] -> IO ()")
    ("displayG" . "GeometryB -> IO ()")
    ("displayGUs" . "[User -> GeometryB] -> IO ()")
    ("displayGU" . "(User -> GeometryB) -> IO ()")
    ("setInitialViewSize" . "RealVal -> RealVal -> IO ()")
    ("withInitialViewSize" . "RealVal -> RealVal -> IO a -> IO a")
    ("inputMonitor" . "User -> ImageB")
    ("displayUMonC" . "ColorB -> (User -> ImageB) -> IO ()")
    ("displayUMon" . "(User -> ImageB) -> IO ()")
    ("displayExMon" . "ColorB -> (User -> (ImageB, Event (IO ()))) -> Win32.HWND -> IO ()")
    ))

;; For clearing when necessary.
;;(setq haskell-doc-user-defined-ids ())

;;; Add Fran doc pairs to the user-defined set.
(setq haskell-doc-user-defined-ids
      (append fran-doc-ids
              (set-difference haskell-doc-user-defined-ids fran-doc-ids
                              :key 'car :test 'string-equal)))

(provide 'fran)