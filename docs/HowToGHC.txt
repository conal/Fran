                    Notes on how to use GHC with Fran

                              Conal Elliott

                  Last modified Thu Feb 26 11:18:22 1998


*Note: almost ready for consumption but not yet.*


Introduction

While Fran programs are convenient to develop under Hugs, they have much
better performance under GHC.  At this point, GHC is also harder to
install and get working under Windows than is Hugs.  I fully expect this
situation to improve in the future.  Meanwhile, this note provides
step-by-step instructions to help a would-be GHC user get started.

The first step is to be sure you have enough disk space.  You'll need
lots (>100M).


** Cygwin

Get cygwin version 18 beta (14Mb) from the following site:

         ftp://ftp.cygnus.com/pub/gnu-win32/gnu-win32-b18/

Download and run cdk.exe, which is a self-extracting executable, and step
through the questions asked by the install wizard.  Use the default disk
location (c:\gnu2in32).  Consult the README.txt in the same Cygnus
directory as cdk.exe and make the four environment changes as directed
(GCC_EXEC_PREFIX, PATH, TCL_LIBRARY, GDBTK_LIBRARY).  If you're using
Win95, put the following in your autoexec.bat:

set GCC_EXEC_PREFIX=C:\gnuwin32\b18\H-i386-cygwin32\lib\gcc-lib\
PATH=%PATH%;C:\gnuwin32\b18\H-i386-cygwin32\bin;C:\gnuwin32\b18\tcl\bin
set TCL_LIBRARY=C:/gnuwin32/b18/tcl/lib/tcl7.6
set GDBTK_LIBRARY=C:/gnuwin32/b18/share/gdbtcl

If you're using NT, open up the System applet in Control Panel, and pick
the "Environment" tab.  (Be sure to hit the "set" button after each
change.)

As directed in the README.txt, make a \bin and copy sh.exe there, and make
a \tmp.  Make sure c:\bin is part of your PATH environment variable.

If you're in Win95, reboot NT to get the changed environment.  In NT start
a new shell (and a new emacs, if you run your shell from within emacs)

Fran uses the Win32 function "timeGetTime", which doesn't not work with
Cygwin b18 out of the box.  So, copy the file cygwin.patch to
c:/gnuwin32/b18/H-i386-cygwin32/i386-cygwin32/include/Windows32/ and then
in that directory say "patch < cygwin.patch".

[GHC folks: is there another solution?]


** Grab GHC

Get the latest Win32 GHC binary release with at least concurrency.  (I
used ghc-2.10-i386-unknown-cygwin32.tar.gz (12.2 Mb) from
http://www.dcs.gla.ac.uk/fp/software/ghc/download.html#2.10

Unzip and untar the .tar.gz file to get a directory tree structure
(41.5Mb) called "fptools" under c:/usr.  (WinZip95 can do both steps.)

[Get Perl.  I already had a version to go with a previous GHC.  The
particular version is important.  See fptools/INSTALL.  N.B. from Sigbjorn
Finne: "I've just had a report from a user who put the Perl binary inside
the bin/ directory of the cygwin32 tree, and did not have much luck with
it. Reason being that the path that follows #! in scripts have to be < 32
chars. Putting perl.exe in /bin solves this problem."]


** Configure GHC

In "c:\usr\fptools", start up cd bash (sh.exe from cygwin), and type
"./configure".  You'll get lots of output.  Look for error messages. I got
a message saying "not updating unwritable cache ./config.cache".
Apparently, this is a harmless bug in bash/the configure script generator.

Check out the generated Makefile, as indicated in c:/usr/fptools/INSTALL.  I
had make three changes. First, replace "INSTALL = /HUGS/install -c" by

  INSTALL	    = /gnuwin32/b18/H-i386-cygwin32/bin/install -c

Next, to enable GHC to compile source files on a different drive from the
one on which it is installed, change the TMPDIR line to the following.

  TMPDIR	    = .

Finally, find the definition of RAWCPP, which should look something like
the following:

    RAWCPP=c:/gnuwin32/b18/H-i386-cygwin32/lib/gcc-lib/i386-cygwin32/cygnus-2.7.2-970404/cpp -traditional

Under NT, you're fine, but under Win95, the long path (or something in it)
seems to be a problem, so copy cpp.exe into c:/bin, and use the following
line instead:

    RAWCPP=/bin/cpp -traditional

In bash, do "make in-place".

It will tell you to add c:\usr\fptools\bin\i386-unknown-cygwin32\ghc-2.10 (or
something similar) to your %PATH%.  Do it.  Again, before continuing,
you'll have to start a new shell under NT or reboot under Win95.


 ** Try GHC

Make a directory "Tst" and a file tst.hs containing only the following
line:

    main = putStrLn "Hello, world!"

(In this example and the ones below, remove the indentation in your copy.)
In bash, do "ghc tst.hs".  You can run your program by saying "./main"
(since the module is implicitly called "Main".)

Alternatively, do "ghc tst.hs -o tst.exe", to get tst.exe, which runs fine
as "./tst".

Now let's make a GHC-style makefile.  First, to make it interesting,
change tst.hs to

    import Fiddle
    main = sayIt "Hello, world!"

and add a file Fiddle.hs

    module Fiddle where
    sayIt = putStrLn

Then make a file called "makefile", with the following lines:

    # The target
    all : tst.exe

    # Standard defs:
    OBJS = $(SRC:.hs=.o)
    GHC  = ghc
    RM   = rm -f

    # Unique to this project:

    SRC = tst.hs Fiddle.hs

    tst.exe :: $(OBJS)
            ghc -o tst.exe $(OBJS)


    ### Boilerplate GHC stuff

    .SUFFIXES	: .lhs .hs .hi .o

    depend :: $(SRC)
            $(GHC) -M $(SRC)

    clean ::
            $(RM) *.o *.hi *.exe

    %.hi		: %.o
                    @:

    %.o		: %.lhs
                    $(RM) $@
                    $(GHC) $(GHC_FLAGS) -cpp -c $< 

    %.o		: %.hs
                    $(RM) $@
                    $(GHC) $(GHC_FLAGS) -c $<

For more info on makefiles, see the GHC user guide's section "Separate
Compilation".

Now check that automatic dependency generation works:

    bash$ make depend
    mkdependHS tst.hs Fiddle.hs

Now look at the end of your makefile, and you should see the following new
lines:

    # DO NOT DELETE: Beginning of Haskell dependencies
    tst.o : tst.hs
    tst.o : ./Fiddle.hi
    Fiddle.o : Fiddle.hs
    # DO NOT DELETE: End of Haskell dependencies

Next you should be able to build an executable again:

    bash$ make
    rm -f Fiddle.o
    ghc  -c Fiddle.hs
    ghc: module version changed to 1; reason: no old .hi file
    rm -f tst.o
    ghc  -c tst.hs
    ghc: module version changed to 2; reason: usages changed
    ghc -o tst.exe tst.o Fiddle.o

And, run it:

    bash$ ./tst
    Hello, world!


** Build Win32 interfaces

[This section under revision.]

This section describes building the Win32 interface from its GreenCard
specification.  I'm assuming it to be installed in
c:/usr/fptools/hslibs/win32.

[Where should it really get installed?]

If the Win32 interfaces are already built for you, you can skip this
section. 

In the Makefile, find the "Configuration" section, and replace the
definitions of GHCDIR, GCDIR, and HERE.  

[Say what to put there]


Also change the definition of GC to the following, assuming the GreenCard
executable is /GreenCard/green-card.exe:

    GC	    	= $(GCDIR)/green-card

Then do "make".  It should go okay.

[Well, it doesn't work for me.  Many modules go okay, but then:

    /usr/fptools/bin/i386-unknown-cygwin32/ghc-2.10/ghc  -H10M -cpp -fglasgow-exts -concurrent -fno-prune-tydecls -optc-D__GHC__ Win32Pen.hs -c -o Win32Pen.o -ohi Win32Pen.hi
    ghc: module version changed to 1; reason: no old .hi file
    ghc1609.hc:1324: `PS_JOIN_MASK' undeclared (first use this function)
    ghc1609.hc:1324: (Each undeclared identifier is reported only once
    ghc1609.hc:1324: for each function it appears in.)
    gcc: Internal compiler error: program cc1 got fatal signal 33
    make: *** [Win32Pen.o] Error 1
    bash$ 

If I delete the following line, compilation goes okay.

    % , PS_JOIN_MASK        -- all the above

]


** Building Fran

If Fran is already built for you, you can skip this section.  Otherwise,
edit Fran/env.mk and change the definitions to suit your environment
(especially HUGSDIR, GHCDIR, GHCLIB, GCDIR, GCLIBDIR, WIN32DIR).  Then cd
to "Fran/" and type "make depends default".  There are several
sub-directories with makefiles in them, and the top-level makefile just
delegates to each of the others in proper order.  If something goes wrong,
and you need to change your env.mk definitions, remake "depends" as well
as "default".  Here's what happens in the making of "default", in case you
care:

1. Sprite library (in SpriteLib).  I assume you have Microsoft Visual C
   installed.  First the sprite library is compiled and SpriteLib.dll is
   copied into your windows system directory (which is presumably on your
   %PATH%).  If you have Hugs 1.4 installed, there will be a SpriteLib.dll
   in the hugs directory.  If that directory is on your path, then rename
   its SpriteLib.dll to avoid getting it by mistake.  (Is this really the
   best policy?)  [##Fran binary installation note: must copy this DLL to
   that same location.]  Then a GHC-compatible library (libSpriteLib.a) is
   built.

2. GreenCard interface to SpriteLib (in gc/GHC).  This step will
   run GreenCard to make HSpriteLib.hs, compile it into HSpriteLib.o, and
   then compile gc/errors.c to make gc/errors.obj.  [##Note: I couldn't do
   an optimized compilation.  See the Makefile comment.]

3. The Fran library (src).  Eventually, it should finish, producing
   libFran.a.  

4. The demos (demos).  Some source files are in this directory and some
   are in subdirectories.

   + test.exe.  Contains some examples from Test.hs.  You can change it to
     contain different ones.  After playing with each example, close the
     window to get the next one.

   + tutorial.exe.  The Fran tutorial examples.  See Tutorial.hs for a URL
     to the article, which has animated GIFs.  The file TutMain.hs
     provides a Main.main.  Hit space, 'n' or right arrow to get from one
     example to the next, and 'p' or left arrow to go back to previous
     ones.

   + spirokids.exe.  Just plain weird.  Check it out.

   + fifteen.exe.  A version of the classic Fifteen puzzle.  Wave the
     mouse over the pieces you want to have move.  There are several other
     variations in Mover.hs.

   + Roids/roids.exe.  A first crack at an asteroids game.  So far, you
     can pilot around and shoot.  There's no screen-wrapping, so hit
     the escape key if you get lost.

   + Sokoban/sokoban.exe.  A wonderful old puzzle game.  Try to get the
     gold balls into the black holders.  Currently crashes.  When it does
     run, it's too slow to be fun.

   + CurveEditor/Main*.exe.  Versions of a curve editor.  Currently, this
     one dies right away when compiled.


Known problems:

  - Problem: if Behavior.lhs is compiled optimized (-O flag to ghc), I get
   "No runnable threads!"  immediately on running a demo.

  - If compiling unoptimized, then after running a while, I either get
    "Entered Forward_Ref 4022304: Should never occur!", or I get dropped
    into the cygwin exception handler with STATUS_ACCESS_VIOLATION.  A
    workaround is to run all the executables with the magical arguments
    "+RTS -F2s", which means to use the two-space garbage collector.

  - Fran leaks memory fast. =:*(


** Building your own Franimations ("frapplets"?) 

Just look at how I set up the demos, and do likewise.  (Set the makefile's
FRAN variable to point to the Fran1 directory.)
