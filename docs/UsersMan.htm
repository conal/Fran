<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Fran Users Manual</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P ALIGN="CENTER"><div align=center>Fran Users Manual<BR>
John Peterson<BR>
Conal Elliott<BR>
Gary Shu Ling<BR>
</div></P>
<P ALIGN="CENTER"><A NAME="sect1"></A>November, 1977</P>
<H2>Introduction</H2>
<P>Fran (Function Reactive Animation) is a collection of data types and functions for composing interactive multimedia animations. It is implemented in Haskell and runs under the Hugs and GHC Haskell systems.</P>
<P>The Fran project has been carried out jointly by Microsoft Research and other Haskell researchers. Currently Fran runs under the Microsoft Windows '95/NT systems. This is research in progress; it is very likely that Fran will continue to change in the near future. We have tested all of the examples distributed with Fran but there are sure to be bugs in the current system. Please report any problems to <TT>fran-bugs@haskell.org</TT>. This document is associated with version 1.07 of Fran, distributed with Hugs 1.4. Newer versions of Fran will appear at the Fran home page: <A HREF="http://www.research.microsoft.com/~conal/Fran"><U><FONT COLOR="#0000ff"><TT>http://www.research.microsoft.com/~conal/Fran</U></FONT></TT></A>. Information about the this version of Fran, including manuals and more animations, is at <A HREF="http://haskell.org/fran"><U><FONT COLOR="#0000ff"><TT>http://haskell.org/fran</U></FONT></TT></A>. </P>
<P>This manual contains a short introduction to Fran and an overview of the pre-defined types and functions available in Fran. A more detailed Fran tutorial is available from the Fran home page.</P>
<P>All of the examples used in this manual are found in the <TT>hugs/lib/fran/demos/UsersMan.hs</TT>. If you are unfamiliar with Fran, the best way to use this manual is to open (double click) <TT>UsersMan.hs </TT>in the <TT>hugs/lib/fran/demos</TT> directory. An individual example can be executed using the <TT>run</TT> function: <TT>run</TT> <I>n</I> executes the <I>n</I>th example. The animation window may initially be hidden when you run an animation -- just click it on the task bar to make it visible. Terminate the animation by closing the animation window. Exit Hugs using <TT>:q</TT> when you are done. If you encounter a program error while an animation is running you may need to exit and restart Hugs. Running <TT>main</TT> displays all of the examples in sequence. Use the arrow keys to step through the examples.</P>
<P>Fran is based on two concepts: <I>behaviors</I> and <I>events</I>. A behavior is a value that varies over time; an event is a sequence of <I>occurrences</I>, each of which has a specific time and value. The interplay between behaviors and events is the essence of Fran. While this manual mainly discusses animations, the same model serves for other reactive systems. Indeed, this implementation cleanly separates the core behavior -- event interaction and the graphics library layered on top of it.</P>
<P><A NAME="sect2"></A></P>
<H2>Behaviors</H2>
<P>In Fran, a value of type <TT>Behavior&nbsp;T</TT> is a time-varying value of type <TT>T</TT>. Behaviors are similar to functions over time: operationally, the type <TT>Behavior&nbsp;T</TT> is the same as <TT>Time&nbsp;-&gt;&nbsp;T</TT> in that it maps time values onto values of type <TT>T</TT>. For example, this behavior oscillates between -1 and 1: <TT><BR>
<BR>
wiggle&nbsp;::&nbsp;Behavior&nbsp;Double<BR>
wiggle&nbsp;=&nbsp;sin&nbsp;(pi&nbsp;*&nbsp;time)<BR>
<BR>
</TT>This definition of <TT>wiggle</TT> uses a pre-defined behavior: <TT>time</TT>. The type of <TT>time</TT> is <TT>Behavior&nbsp;Double</TT> (or <TT>TimeB</TT>, as defined by a synonym) and its value is the current time in seconds. Thus the <TT>wiggle</TT> behavior cycles from -1 to 1 with a period of 2 seconds. Here the <TT>sin</TT> and <TT>(*)</TT> functions are applied to behaviors instead of ordinary numeric values. This is possible since Fran defines an instance of the <TT>Behavior</TT> type for many built-in classes; in this case the <TT>Num</TT> and <TT>Floating</TT> classes are overloaded in the type <TT>Behavior</TT>. Much more will be said of this later.</P>
<P>Since behaviors exist over time, a behavior is observed by playing it in some manner. That is, the user watches and listens to an object as it changes and reacts to input. Fran includes functions for constructing animations that are played in a graphics window. Full details of this library are presented later; here we will introduce just enough of it so that we can explore events and behaviors. Here is a small subset of the graphics library: <TT><BR>
<BR>
--&nbsp;Basic&nbsp;data&nbsp;types<BR>
data&nbsp;&nbsp;&nbsp;Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;data&nbsp;type&nbsp;of&nbsp;colors<BR>
type&nbsp;&nbsp;&nbsp;RealVal&nbsp;=&nbsp;Double<BR>
type&nbsp;&nbsp;&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Double&nbsp;<BR>
data&nbsp;&nbsp;&nbsp;Point2&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;a&nbsp;2D&nbsp;point<BR>
data&nbsp;&nbsp;&nbsp;Vector2&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;a&nbsp;2D&nbsp;vector<BR>
data&nbsp;&nbsp;&nbsp;ImageB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Reactive&nbsp;images<BR>
<BR>
--&nbsp;synonyms&nbsp;that&nbsp;abbreviate&nbsp;common&nbsp;behavioral&nbsp;types<BR>
type&nbsp;&nbsp;&nbsp;RealB&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;RealVal<BR>
type&nbsp;&nbsp;&nbsp;ColorB&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Color<BR>
type&nbsp;&nbsp;&nbsp;Point2B&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Point2<BR>
type&nbsp;&nbsp;&nbsp;Vector2B&nbsp;=&nbsp;Behavior&nbsp;Point2<BR>
type&nbsp;&nbsp;&nbsp;TimeB&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Time<BR>
<BR>
--&nbsp;Graphics&nbsp;operations&nbsp;<BR>
--&nbsp;A&nbsp;behavioral&nbsp;point&nbsp;constructor<BR>
point2XY&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Point2B&nbsp;&nbsp;&nbsp;--&nbsp;Construct&nbsp;a&nbsp;2D&nbsp;point<BR>
vector2XY&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Vector2B&nbsp;&nbsp;--&nbsp;Construct&nbsp;a&nbsp;2D&nbsp;vector<BR>
origin2&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;The&nbsp;origin&nbsp;(maps&nbsp;to&nbsp;window&nbsp;center)<BR>
circle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ImageB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;A&nbsp;circle&nbsp;at&nbsp;(0,0)&nbsp;with&nbsp;unit&nbsp;radius<BR>
withColor&nbsp;&nbsp;::&nbsp;ColorB&nbsp;-&gt;&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB&nbsp;&nbsp;--&nbsp;Paint&nbsp;with&nbsp;a&nbsp;solid&nbsp;color<BR>
move&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Vector2B&nbsp;-&gt;&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB&nbsp;--&nbsp;Move&nbsp;an&nbsp;image&nbsp;<BR>
red,&nbsp;blue,green&nbsp;&nbsp;::&nbsp;ColorB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Some&nbsp;built-in&nbsp;colors<BR>
over&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB&nbsp;&nbsp;--&nbsp;Place&nbsp;one&nbsp;image&nbsp;over&nbsp;another<BR>
stretch&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB&nbsp;&nbsp;&nbsp;--&nbsp;Enlarge&nbsp;(or&nbsp;reduce)&nbsp;the<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;size&nbsp;of&nbsp;an&nbsp;image<BR>
--&nbsp;Display&nbsp;routine.&nbsp;&nbsp;Initial&nbsp;screen&nbsp;scaled&nbsp;to&nbsp;(-1,-1)&nbsp;,&nbsp;(1,1) <BR>
displayU&nbsp;&nbsp;&nbsp;::&nbsp;(User&nbsp;-&gt;&nbsp;ImageB)&nbsp;-&gt;&nbsp;IO&nbsp;()&nbsp;&nbsp;--&nbsp;display&nbsp;an user-dependent <BR>
<BR>
</TT>To avoid clutter in type signatures involving <TT>Behavior</TT> many types have pre-defined synonyms for their behavioral counterparts. The <TT>type</TT> declarations above show some of these synonyms. Some behavioral types, such as <TT>ImageB</TT>, are implemented directly instead of using the <TT>Behavior</TT> type constructor.</P>
<P>The <TT>disp</TT> function takes a reactive animation and plays it in a graphics window. Fran uses the type <TT>User</TT> to represent external events generated by the user. Images which don't react user input can usually ignore the <TT>User</TT> value that <TT>disp</TT> passes to the animation. </P>
<P>Here are a few of the built-in behaviors in Fran: <TT><BR>
<BR>
time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;TimeB<BR>
constantB&nbsp;&nbsp;&nbsp;::&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;create&nbsp;a&nbsp;constant&nbsp;behavior<BR>
mouseMotion&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Vector2B&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;tracks&nbsp;the&nbsp;position&nbsp;of&nbsp;the&nbsp;mouse</P>
</TT><P>Here is a very simple program to display a pulsing circle: <TT><BR>
<BR>
module&nbsp;Examples&nbsp;where<BR>
<BR>
import&nbsp;Fran&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Basic&nbsp;Fran&nbsp;functionality<BR>
<BR>
circ&nbsp;::&nbsp;ImageB<BR>
circ&nbsp;=&nbsp;stretch&nbsp;wiggle&nbsp;(withColor&nbsp;red&nbsp;circle)<BR>
<BR>
example1&nbsp;u&nbsp;=&nbsp;circ<BR>
<BR>
</TT>Execute this example using either <TT>disp&nbsp;example1</TT> or <TT>run&nbsp;1</TT>, for short. </P>
<P>Here is a slightly more complex behavior: <TT><BR>
<BR>
ball1,&nbsp;ball2,&nbsp;movingBall1,&nbsp;movingBall2&nbsp;::&nbsp;ImageB<BR>
ball1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;stretch&nbsp;0.3&nbsp;(withColor&nbsp;red&nbsp;circle)<BR>
movingBall1&nbsp;&nbsp;&nbsp;=&nbsp;move&nbsp;(vector2XY&nbsp;0&nbsp;wiggle)&nbsp;ball1<BR>
ball2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;stretch&nbsp;0.4&nbsp;(withColor&nbsp;blue&nbsp;circle)<BR>
movingBall2&nbsp;&nbsp;&nbsp;=&nbsp;move&nbsp;(vector2XY&nbsp;wiggle&nbsp;0)&nbsp;ball2<BR>
<BR>
example2&nbsp;u&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;movingBall1&nbsp;`over`&nbsp;movingBall2<BR>
<BR>
</TT>Some behaviors are generated by user interaction. For example, the mouse motion is represented by the following behavior: <TT><BR>
<BR>
mouseMotion&nbsp;&nbsp;&nbsp;::&nbsp;&nbsp;User&nbsp;-&gt;&nbsp;Vector2B<BR>
<BR>
</TT>As mouse motion is part of the user input, the <TT>User</TT> value passed into the animation by the <TT>disp</TT> function must then be passed on to <TT>mouseMotion</TT>. This program displays a ball that follows the mouse: <TT><BR>
<BR>
example3&nbsp;u&nbsp;=&nbsp;move&nbsp;(mouseMotion&nbsp;u)&nbsp;ball1</P>
</TT><P><A NAME="sect3"></A></P>
<H2>Events</H2>
<P>Behaviors are continuous, defined over a continuous range of time values. Events, in contrast, are instantaneous: an event occurs at a discrete set of times. Each event occurrence has a corresponding value; the type <TT>Event&nbsp;T</TT> denotes an event that generates a value of type <TT>T</TT> when it happens. Events that do not generate interesting values have type <TT>Event&nbsp;()</TT>. Events in Fran are concrete values rather than ephemeral happenings and may be treated as any other data object.</P>
<P>A Fran program reacts to external events; each kind of external event is represented by constructor in the data type <TT>UserAction</TT>. The stream of incoming events has the type <TT>Event&nbsp;UserAction</TT>. This synonym: <TT><BR>
<BR>
type&nbsp;User&nbsp;=&nbsp;Event&nbsp;UserAction<BR>
<BR>
</TT>gives a shorter name to the program input. Specific kinds of events, such as `resize window' or `keyboard press' are extracted from the <TT>User</TT> type. For example, these events are associated with the mouse buttons: <TT><BR>
<BR>
lbpU,rbpU&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Mouse&nbsp;button&nbsp;presses<BR>
<BR>
Occurrences of t</TT>hese events have "aged" <TT>User</TT> values. To understand this notion of aging, one can think of <TT>Event&nbsp;T</TT> as <TT>[(Time,T)]</TT>: a (time-sorted) list of occurrences containing the time and event value for each occurrence. For example, this list represents a user as a sequence of key- and button-presses.<TT><BR>
<BR>
[(1, CharKey 'a'), (3, LBP ()),&nbsp;(5, CharKey 'b'),&nbsp;(7, RBP ()]<BR>
<BR>
The first occurrence of lbpU</TT> applied to this user is at time 3, and its value is the following "residual" user:</P>
<TT><P>[(5, CharKey 'b'),&nbsp;(7, RBP ()]</P>
</TT><P>The <TT>lbpU</TT> and <TT>rbpU</TT> functions are not formally a part of Fran but can be defined trivially from built in Fran functions.<TT> </P>
</TT><P>Here are some other basic events: <TT><BR>
<BR>
neverE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
constE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Time&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
timeIs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Time&nbsp;-&gt;&nbsp;Event&nbsp;()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
timeIs&nbsp;t&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;constE &nbsp;t&nbsp;()&nbsp;<BR>
alarmE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Time&nbsp;-&gt;&nbsp;Time&nbsp;-&gt;&nbsp;Event&nbsp;()<BR>
<BR>
</TT>The <TT>neverE</TT> event never happens. The <TT>constE</TT> and <TT>timeIs</TT> events occur eactly once. The <TT>alarmE</TT> event goes off at regular intervals: the arguments are the start time and the time between events.</P>
<P><A NAME="sect4"></A></P>
<H2>Reactive Behaviors</H2>
<P>Events are used to build <I>reactive behaviors</I> which change course in response to events. Reactive behaviors are defined using the <TT>untilB</TT> function: <TT><BR>
<BR>
untilB&nbsp;::&nbsp;GBehavior&nbsp;bv&nbsp;=&gt;&nbsp;bv&nbsp;-&gt;&nbsp;Event&nbsp;bv&nbsp;-&gt;&nbsp;bv<BR>
<BR>
</TT>The class <TT>GBehavior</TT> defines reactive data types. Some reactive types, such as <TT>RealB</TT> or <TT>ColorB</TT> are formed by applying the <TT>Behavior </TT>type constructor to an existing type. Other types, such as <TT>ImageB</TT>, are conceptually behaviors in that they exist over time and support <TT>untilB</TT>, but are not literally behaviors. The <TT>untilB</TT> function changes the course of a behavior when an event occurs; the first event occurrence generates the new behavior to be followed after the occurrence time. </P>
<P>Before we can use <TT>untilB</TT> in an example, we need to transform an event such as <TT>lbpU</TT> of type <TT>Event&nbsp;User</TT> into an event which generates a behavior. This function transforms an event: <TT><BR>
<BR>
(==&gt;)&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;(a&nbsp;-&gt;&nbsp;b)&nbsp;-&gt;&nbsp;Event&nbsp;b<BR>
<BR>
</TT>Note the similarity between <TT>(==&gt;)</TT> and the <TT>map</TT> function. Using <TT>(==&gt;)</TT>, we can now write a simple reactive behavior: <TT><BR>
<BR>
example4&nbsp;u&nbsp;=&nbsp;withColor&nbsp;(doRed&nbsp;u)&nbsp;circle&nbsp;where<BR>
&nbsp;&nbsp;doRed,&nbsp;doBlue&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;ColorB<BR>
&nbsp;&nbsp;doRed&nbsp;&nbsp;u&nbsp;=&nbsp;red&nbsp;&nbsp;`untilB`&nbsp;(lbpU&nbsp;u&nbsp;==&gt;&nbsp;doBlue)<BR>
&nbsp;&nbsp;doBlue&nbsp;u&nbsp;=&nbsp;blue&nbsp;`untilB`&nbsp;(lbpU&nbsp;u&nbsp;==&gt;&nbsp;doRed)<BR>
<BR>
</TT>The circle changes between red and blue with each left button press. The parentheses around the <TT>==&gt;</TT> expressions have been added for clarity; they are not needed since <TT>`untilB`</TT> has a lower fixity than <TT>==&gt;</TT> . The <TT>(==&gt;)</TT> operator passes the new <TT>User</TT> value generated by <TT>lbpU</TT> on to the next cycle. </P>
<P><A NAME="sect5"></A></P>
<H2>Using Events and Behaviors</H2>
<P>Fran contains a rich library of functions involving events and behaviors. <A NAME="sect5_1"></A></P>
<H3>Event Transformations and Utilities</H3>
<P>The choice operator merges two events into a single one: <TT><BR>
<BR>
(.|.)&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;a<BR>
anyE&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;[Event&nbsp;a]&nbsp;-&gt;&nbsp;Event&nbsp;a<BR>
anyE&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;foldr&nbsp;(.|.)&nbsp;neverE<BR>
<BR>
</TT>For example, given the definition <TT><BR>
<BR>
click&nbsp;u&nbsp;=&nbsp;lbpU&nbsp;u&nbsp;.|.&nbsp;rbpU&nbsp;u<BR>
<BR>
and a user u, </TT>the event <TT>click&nbsp;u&nbsp;</TT>contains all of left and right button presses from <TT>u</TT>.</P>
<P>In the following example, the circle may turn either red or blue, depending on which mouse button is pressed first: <TT><BR>
<BR>
example5&nbsp;u&nbsp;=&nbsp;withColor&nbsp;(c&nbsp;red&nbsp;u)&nbsp;circle&nbsp;where<BR>
&nbsp;&nbsp;c&nbsp;::&nbsp;ColorB&nbsp;-&gt;&nbsp;User&nbsp;-&gt;&nbsp;ColorB<BR>
&nbsp;&nbsp;c&nbsp;cl&nbsp;u&nbsp;=&nbsp;cl&nbsp;`untilB`&nbsp;((lbpU&nbsp;u&nbsp;==&gt;&nbsp;c&nbsp;blue)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.|.&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(rbpU&nbsp;u&nbsp;==&gt;&nbsp;c&nbsp;green))<BR>
<BR>
</TT>Again, the parentheses are not really needed. Note the use of currying to pass the updated <TT>User</TT> value generated by <TT>lbpU</TT> or <TT>rbpU</TT> to the next iteration of the loop. </P>
<P>The <TT>(==&gt;)</TT> operator is a special case of a more general event handler, <TT>handleE</TT>. Using <TT>handleE</TT>, the event time, event value, and residual event are all revealed. <TT><BR>
<BR>
handleE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;(Time&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;b)&nbsp;-&gt;&nbsp;Event&nbsp;b<BR>
(==&gt;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;(a&nbsp;-&gt;&nbsp;b)&nbsp;-&gt;&nbsp;Event&nbsp;b<BR>
e&nbsp;==&gt;&nbsp;f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;e&nbsp;`handleE`&nbsp;(\_&nbsp;x&nbsp;_&nbsp;-&gt;&nbsp;f&nbsp;x)<BR>
(-=&gt;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;b&nbsp;-&gt;&nbsp;Event&nbsp;b<BR>
e&nbsp;-=&gt;&nbsp;v&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;e&nbsp;==&gt;&nbsp;const&nbsp;v<BR>
withRestE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;(a,&nbsp;Event&nbsp;a)<BR>
withRestE&nbsp;e&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;e&nbsp;`handleE`&nbsp;(\_&nbsp;v&nbsp;e'&nbsp;-&gt;&nbsp;(v,e'))<BR>
withTimeE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;(a,&nbsp;Time)<BR>
withTimeE&nbsp;e&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;e&nbsp;`handleE`&nbsp;(\t&nbsp;v&nbsp;_&nbsp;-&gt;&nbsp;(v,t))</TT><FONT FACE="Courier New" SIZE=2><BR>
withRestE_ :: Event a -&gt; Event (Event a)<BR>
withRestE_ e = e `handleE` \ te x e' -&gt; e'<BR>
withTimeE :: Event a -&gt; Event (a, Time)<BR>
withTimeE e = e `handleE` \ te x e' -&gt; (x,te)<BR>
nextE :: Event a -&gt; Event (Event a)<BR>
nextE = withRestE_</P>
</FONT><P>These functions associate the events in an event stream with values in a list: <TT><BR>
<BR>
withElemE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;[b]&nbsp;-&gt;&nbsp;Event&nbsp;(a,b)<BR>
withElemE_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;[b]&nbsp;-&gt;&nbsp;Event&nbsp;b<BR>
e&nbsp;`withElemE_`&nbsp;l&nbsp;=&nbsp;&nbsp;(e&nbsp;`withElemE`&nbsp;l)&nbsp;==&gt;&nbsp;snd</P>
</TT><P>Finally, these utilities convert event streams into behaviors: <TT><BR>
<BR>
--&nbsp;Assemble&nbsp;a&nbsp;behavior&nbsp;piecewise&nbsp;from&nbsp;an initial one and an event<BR>
switcher&nbsp;::&nbsp;GBehavior&nbsp;bv&nbsp;=&gt;&nbsp;bv&nbsp;-&gt;&nbsp;Event&nbsp;bv&nbsp;-&gt;&nbsp;bv<BR>
</TT><FONT FACE="Courier New" SIZE=2>-- Accumulate using f, but age the accumulator<BR>
accumB :: GBehavior bv =&gt; (bv -&gt; b -&gt; bv) -&gt; bv -&gt; Event b -&gt; bv</FONT><TT><BR>
--&nbsp;A&nbsp;switcher&nbsp;for&nbsp;piecewise-constant&nbsp;behaviors<BR>
stepper&nbsp;::&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
stepper&nbsp;x0&nbsp;e&nbsp;=&nbsp;switcher&nbsp;(constantB&nbsp;x0)&nbsp;(e&nbsp;==&gt;&nbsp;constantB)</P>
</TT><P>This example uses <TT>withElemE_</TT> to map the left button presses onto a series of numbers then uses <TT>stepper</TT> to convert the event into a behavior. <TT><BR>
<BR>
example6&nbsp;u&nbsp;=&nbsp;move&nbsp;(vector2XY&nbsp;l&nbsp;l)&nbsp;ball<BR>
&nbsp;&nbsp;where<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ball&nbsp;=&nbsp;stretch&nbsp;0.3&nbsp;(withColor&nbsp;red&nbsp;circle)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l&nbsp;=&nbsp;stepper&nbsp;0&nbsp;(lbpCounter&nbsp;u)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lbpCounter&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;RealVal<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lbpCounter&nbsp;u&nbsp;=&nbsp;withElemE_&nbsp;(lbpU&nbsp;u)&nbsp;[0.1,&nbsp;0.2&nbsp;..]</P>
</TT><P>These functions filter a selected set of occurrences out of an event: <TT><BR>
<BR>
filterE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;(a&nbsp;-&gt;&nbsp;Maybe&nbsp;b)&nbsp;-&gt;&nbsp;Event&nbsp;b<BR>
suchThat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;(a&nbsp;-&gt;&nbsp;Bool)&nbsp;-&gt;&nbsp;Event&nbsp;a<BR>
suchThat&nbsp;ev&nbsp;pred&nbsp;&nbsp;=&nbsp;&nbsp;filterE&nbsp;ev&nbsp;(\a&nbsp;-&gt;&nbsp;if&nbsp;pred&nbsp;a&nbsp;then&nbsp;Just&nbsp;a&nbsp;else&nbsp;Nothing)&nbsp;<BR>
<A NAME="sect5_2"></A></P>
</TT><H3>User Interaction</H3>
<P>These events and behaviors are derived from user input. <TT><BR>
<BR>
--&nbsp;mouse&nbsp;button&nbsp;press&nbsp;and&nbsp;release&nbsp;events<BR>
lbp,&nbsp;rbp,&nbsp;lbr,&nbsp;rbr&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;()<BR>
--&nbsp;keyboard&nbsp;stuff.&nbsp;&nbsp;VKey&nbsp;is&nbsp;defined&nbsp;in&nbsp;the&nbsp;Win32&nbsp;module<BR>
keyPressAny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;VKey<BR>
keyPress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;VKey&nbsp;-&gt;&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;()<BR>
keyReleaseAny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;VKey<BR>
keyRelease&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;VKey&nbsp;-&gt;&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;()<BR>
--&nbsp;These&nbsp;use&nbsp;Char&nbsp;instead&nbsp;of&nbsp;VKey<BR>
charPress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;Char<BR>
charPressAny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Char&nbsp;-&gt;&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;()<BR>
--&nbsp;Returns&nbsp;size&nbsp;of&nbsp;resized&nbsp;window<BR>
resize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;Vector2<BR>
viewSize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Vector2B<BR>
--&nbsp;Mouse&nbsp;motion<BR>
mouseMove&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;Point2<BR>
mouse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Point2B<BR>
mouseMotion&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Vector2B<BR>
--&nbsp;Allows&nbsp;synchronization&nbsp;with&nbsp;display&nbsp;events<BR>
updateDone&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;Time<BR>
updatePeriod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Behavior&nbsp;Double<BR>
--&nbsp;Time&nbsp;since&nbsp;start of User.<BR>
userTime&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;TimeB<BR>
userTimeIs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Time&nbsp;-&gt;&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;()</P>
</TT><P><A NAME="sect5_3"></A></P>
<H3>Integration</H3>
<P>The <TT>integral</TT> function integrates numeric behaviors over time. Both reals and vectors can be integrated. The type of <TT>integral</TT> is: <TT><BR>
<BR>
integral&nbsp;::&nbsp;(VectorSpace&nbsp;v)&nbsp;=&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;User&nbsp;-&gt;&nbsp;Behavior&nbsp;v<BR>
atRate&nbsp;&nbsp;&nbsp;::&nbsp;(VectorSpace&nbsp;v)&nbsp;=&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;User&nbsp;-&gt;&nbsp;Behavior&nbsp;v<BR>
<BR>
</TT>Function <TT>atRate</TT> is another name for <TT>integral</TT>. The types in <TT>VectorSpace</TT> include <TT>Real</TT>, <TT>Vector2</TT>, and <TT>Vector3</TT>. </P>
<P>The <TT>User</TT> argument supplies the integration start time and a sampling clock which determines the step size used by the underlying numerical method.</P>
<P>This example uses integration to express the motion of a falling ball: </P>
<FONT FACE="Courier New" SIZE=2><P>example7 u = withColor red (moveXY 0 pos (stretch 0.1 circle))<BR>
  where<BR>
   pos = p0 + integral vel u<BR>
   vel = v0 + integral acc u<BR>
   acc = -0.3<BR>
   p0  = -1<BR>
   v0  = 1</P>
</FONT><P>Integrals may be mutually recursive.</P>
<P><A NAME="sect5_4"></A></P>
<H3>Snapshots</H3>
<P>A snapshot samples the value of a behavior at an event occurrence. The snapshot functions are: <TT><BR>
<BR>
snapshot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b&nbsp;-&gt;&nbsp;Event&nbsp;(a,&nbsp;b)<BR>
snapshot_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b&nbsp;-&gt;&nbsp;Event&nbsp;b<BR>
snapshot_&nbsp;e&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;(e&nbsp;`snapshot`&nbsp;b)&nbsp;==&gt;&nbsp;snd<BR>
whenSnap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b&nbsp;-&gt;&nbsp;(a&nbsp;-&gt;&nbsp;b&nbsp;-&gt;&nbsp;Bool)&nbsp;-&gt;&nbsp;Event&nbsp;a<BR>
whenSnap&nbsp;e&nbsp;b&nbsp;pred&nbsp;=&nbsp;&nbsp;(e&nbsp;`snapshot`&nbsp;b&nbsp;`suchThat`&nbsp;uncurry&nbsp;pred)&nbsp;==&gt;&nbsp;fst<BR>
whenE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;Bool&nbsp;-&gt;&nbsp;Event&nbsp;a<BR>
e&nbsp;`whenE`&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;whenSnap&nbsp;e&nbsp;b&nbsp;(curry&nbsp;snd)<BR>
<BR>
</TT>This program captures the mouse position when the left button is pressed and moves the ball to that position: <TT><BR>
<BR>
mouseEvs&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;Point2B<BR>
mouseEvs&nbsp;u&nbsp;=&nbsp;lbp&nbsp;u&nbsp;`snapshot_`&nbsp;mouseMotion&nbsp;u<BR>
<BR>
example8&nbsp;u&nbsp;=&nbsp;withColor&nbsp;red&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(move&nbsp;(stepper&nbsp;S.zeroVector&nbsp;(mouseEvs&nbsp;u)&nbsp;(stretch&nbsp;0.1&nbsp;circle))&nbsp;</P>
</TT><P><A NAME="sect5_5"></A></P>
<H3>Predicates</H3>
<P>The <TT>predicate</TT> function creates an event which monitors a boolean behavior: <TT><BR>
<BR>
predicate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;Bool&nbsp;-&gt;&nbsp;User&nbsp;-&gt;&nbsp;Event&nbsp;(User)<BR>
<BR>
</TT>The <TT>User</TT> argument is used as a sampling clock. Care must be taken since sampling may miss occurrences of the boolean behavior. (Some previous versions of Fran were able to detect even equality events, and we hope that future ones will.)  </P>
<P>The following example is of a bouncing ball. Again, it defines the position as the integral of velocity, and uses the integral of acceleration in defining the velocity.  This time, however, we also sum up instanteous velocity changes, or "impulses", due to collision.  The trick is to snapshot the velocity at each collision, and multiply the snapshot by nearly negative two to reverse the instantaneous velocity with a small energy loss.<TT><BR>
<BR>
</TT><FONT FACE="Courier New" SIZE=2>example9 u = withColor red (moveXY 0 pos (stretch 0.1 circle)) <BR>
 where<BR>
   pos     = p0 + integral vel u<BR>
   vel     = v0 + integral acc u + sumE impulse<BR>
   impulse = collide `snapshot_` vel ==&gt; (* (-1.9))<BR>
   collide = predicate (pos &lt;=* (-1) &amp;&amp;* vel &lt;* 0) u<BR>
   acc     = -1<BR>
   p0      = -1<BR>
   v0      = 2</P>
</FONT><P>The <TT>&lt;=*</TT> operator is a behavioral version of <TT>&lt;=</TT>, as explained in the next section. The predicate checks that the position is less or equal to the floor height rather than simply checking for equality since sampling may miss the instant at which the position is exactly at the floor.  The test for negative velocity (downward motion) is so that a ball is not considered to be colliding when it is trying to come back up out of the floor.</P>
<P><A NAME="sect5_6"></A></P>
<H3>Time Transformation</H3>
<P>A <I>time transform</I> alters the time frame within a behavior. <TT><BR>
<BR>
timeTransform&nbsp;&nbsp;::&nbsp;GBehavior&nbsp;bv&nbsp;=&gt;&nbsp;bv&nbsp;-&gt;&nbsp;Behavior&nbsp;Time&nbsp;-&gt;&nbsp;bv<BR>
<BR>
later,&nbsp;earlier&nbsp;::&nbsp;GBehavior&nbsp;bv&nbsp;=&gt;&nbsp;TimeB&nbsp;-&gt;&nbsp;bv&nbsp;-&gt;&nbsp;bv<BR>
later&nbsp;dt&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;b&nbsp;`timeTransform`&nbsp;(time&nbsp;-&nbsp;dt)<BR>
earlier&nbsp;dt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;later&nbsp;(-dt)<BR>
faster,&nbsp;slower&nbsp;::&nbsp;GBehavior&nbsp;bv&nbsp;=&gt;&nbsp;TimeB&nbsp;-&gt;&nbsp;bv&nbsp;-&gt;&nbsp;bv<BR>
faster&nbsp;x&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;b&nbsp;`timeTransform`&nbsp;(time&nbsp;*&nbsp;x)<BR>
slower&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;faster&nbsp;(1/x)<BR>
<BR>
</TT>The expression <TT>timeTransform&nbsp;b1&nbsp;tb</TT> yields a new behavior which is evaluated in a transformed time-frame according to behavior <TT>tb</TT>. For example: <TT><BR>
<BR>
example10&nbsp;u&nbsp;=&nbsp;move&nbsp;(mouseMotion&nbsp;u)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(stretch&nbsp;0.2&nbsp;(withColor&nbsp;red&nbsp;circle))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`over`&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move&nbsp;(later&nbsp;2&nbsp;(mouseMotion&nbsp;u))<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(stretch&nbsp;0.3&nbsp;(withColor&nbsp;blue&nbsp;circle))</P>
</TT><P><A NAME="sect5_7"></A></P>
<H3>Utilities</H3>
<P>These are some miscellaneous utilities: <TT><BR>
<BR>
--&nbsp;explicit&nbsp;behavior&nbsp;aging:<BR>
afterE&nbsp;::&nbsp;GBehavior&nbsp;bv&nbsp;=&gt;&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;bv&nbsp;-&gt;&nbsp;Event&nbsp;(a,&nbsp;bv)&nbsp;<BR>
afterE_&nbsp;::&nbsp;GBehavior&nbsp;bv&nbsp;=&gt;&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;bv&nbsp;-&gt;&nbsp;Event&nbsp;bv<BR>
<BR>
--&nbsp;Ties&nbsp;switcher&nbsp;to&nbsp;an&nbsp;event&nbsp;stream<BR>
repeatE&nbsp;::&nbsp;GBehavior&nbsp;bv&nbsp;=&gt;&nbsp;Event&nbsp;bv&nbsp;-&gt;&nbsp;Event&nbsp;bv<BR>
repeatE&nbsp;e&nbsp;=&nbsp;withRestE&nbsp;e&nbsp;==&gt;&nbsp;uncurry&nbsp;switcher<BR>
<BR>
--&nbsp;An&nbsp;event&nbsp;based&nbsp;version&nbsp;of&nbsp;scanl:<BR>
scanlE&nbsp;::&nbsp;(a&nbsp;-&gt;&nbsp;b&nbsp;-&gt;&nbsp;a)&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;b&nbsp;-&gt;&nbsp;Event&nbsp;a<BR>
<BR>
countE&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;Int<BR>
countE&nbsp;e&nbsp;=&nbsp;stepper&nbsp;0&nbsp;(scanlE&nbsp;(\&nbsp;c&nbsp;_&nbsp;-&gt;&nbsp;c&nbsp;+&nbsp;1)&nbsp;0&nbsp;e)<BR>
<BR>
--&nbsp;Adds&nbsp;the&nbsp;previous&nbsp;value&nbsp;to&nbsp;the&nbsp;current&nbsp;event&nbsp;value:<BR>
withPrevE&nbsp;&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;(a,a)<BR>
withPrevE_&nbsp;::&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;a<BR>
<BR>
timeSince&nbsp;::&nbsp;Time&nbsp;-&gt;&nbsp;Behavior&nbsp;DTime<BR>
timeSince&nbsp;t0&nbsp;=&nbsp;time&nbsp;-&nbsp;constantB&nbsp;t0<BR>
<BR>
--&nbsp;modify&nbsp;an&nbsp;ongoing&nbsp;behavior&nbsp;using&nbsp;event&nbsp;stream&nbsp;values<BR>
accumB&nbsp;::&nbsp;GBehavior&nbsp;bv&nbsp;=&gt;&nbsp;(bv&nbsp;-&gt;&nbsp;b&nbsp;-&gt;&nbsp;bv)&nbsp;-&gt;&nbsp;bv&nbsp;-&gt;&nbsp;Event&nbsp;b&nbsp;-&gt;&nbsp;bv<BR>
<BR>
nextUser&nbsp;::&nbsp;(User&nbsp;-&gt;&nbsp;Event&nbsp;a)&nbsp;-&gt;&nbsp;(User&nbsp;-&gt;&nbsp;Event&nbsp;(a,User))<BR>
nextUser&nbsp;f&nbsp;u&nbsp;=&nbsp;f&nbsp;u&nbsp;`afterE`&nbsp;u<BR>
nextUser_&nbsp;::&nbsp;(User&nbsp;-&gt;&nbsp;Event&nbsp;a)&nbsp;-&gt;&nbsp;(User&nbsp;-&gt;&nbsp;Event&nbsp;User)<BR>
nextUser_&nbsp;f&nbsp;u&nbsp;=&nbsp;nextUser&nbsp;f&nbsp;u&nbsp;==&gt;&nbsp;snd<BR>
<BR>
leftButton,&nbsp;rightButton&nbsp;::&nbsp;User&nbsp;-&gt;&nbsp;BoolB<BR>
leftButton&nbsp;&nbsp;u&nbsp;=&nbsp;toggle&nbsp;(lbp&nbsp;u)&nbsp;(lbr&nbsp;u)<BR>
rightButton&nbsp;u&nbsp;=&nbsp;toggle&nbsp;(rbp&nbsp;u)&nbsp;(rbr&nbsp;u)<BR>
<BR>
--&nbsp;Debugging&nbsp;support<BR>
data&nbsp;TraceEFlag&nbsp;=&nbsp;TraceOccsE&nbsp;|&nbsp;TraceAllE&nbsp;&nbsp;&nbsp;deriving&nbsp;(Show,&nbsp;Eq)<BR>
traceE&nbsp;::&nbsp;Show&nbsp;a&nbsp;=&gt;&nbsp;String&nbsp;-&gt;&nbsp;TraceEFlag&nbsp;-&gt;&nbsp;Event&nbsp;a&nbsp;-&gt;&nbsp;Event&nbsp;a<BR>
<BR>
<A NAME="lifting"></A></TT>Note that the function <TT>nextUser_</TT> is used to define <TT>lbpU</TT> and r<TT>bpU</TT>, which, as we mentioned is not a part of Fran, but just defined in this tutorial.</P>
<FONT FACE="Courier New" SIZE=2><P><A NAME="sect6"></A>lbpU = nextUser_ lbp <BR>
rbpU = nextUser_ rbp  </P>
</FONT><P>&nbsp;</P>
<H2>Lifted Behaviors</H2>
<P>We say a type or function which has been raised from the domain of ordinary Haskell values to behaviors is "lifted". For example, a function such as <TT><BR>
<BR>
(&amp;&amp;)&nbsp;&nbsp;&nbsp;::&nbsp;&nbsp;&nbsp;&nbsp;Bool&nbsp;-&gt;&nbsp;Bool&nbsp;-&gt;&nbsp;Bool<BR>
<BR>
</TT>can be promoted to a corresponding function over behaviors: <TT><BR>
<BR>
(&amp;&amp;*)&nbsp;&nbsp;&nbsp;::&nbsp;&nbsp;&nbsp;&nbsp;BoolB&nbsp;-&gt;&nbsp;BoolB&nbsp;-&gt;&nbsp;BoolB<BR>
<BR>
</TT>The type <TT>BoolB</TT> is a synonym for <TT>Behavior&nbsp;Bool</TT>; most commonly used types have a behavioral synonym defined in Fran. The name <TT>&amp;&amp;* </TT>arises from a simple naming convention in Fran: lifted operators are appended with a <TT>*</TT> and lifted vars are appended with <TT>B</TT>. </P>
<P>The renaming required by <TT>&amp;&amp;</TT> can sometimes be avoided using type classes. For example, an instance declaration such as the following <TT><BR>
<BR>
instance&nbsp;&nbsp;Num&nbsp;a&nbsp;=&gt;&nbsp;Num&nbsp;(Behavior&nbsp;a)&nbsp;<BR>
<BR>
</TT>allows all of the methods in <TT>Num</TT> to be applied directly to behaviors without renaming. Constant types in the class definition cannot be lifted by such a declaration. In the <TT>Num</TT> instance above, the type of <TT>fromInteger</TT> is <TT><BR>
<BR>
fromInteger&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;&nbsp;Num&nbsp;a&nbsp;=&gt;&nbsp;Integer&nbsp;-&gt;&nbsp;(Behavior&nbsp;a)<BR>
<BR>
</TT>The argument to <TT>fromInteger</TT> is not lifted - only the result. This allows integer constants to be treated as constant behaviors. While <TT>fromInteger</TT> works in the expected way, other class methods cannot be used. In the declaration <TT><BR>
<BR>
instance&nbsp;Ord&nbsp;a&nbsp;=&gt;&nbsp;Ord&nbsp;(Behavior&nbsp;a)&nbsp;<BR>
<BR>
</TT>is not useful since it defines operations such as <TT><BR>
<BR>
(&gt;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Bool<BR>
<BR>
</TT>Unfortunately, Fran needs a <TT>&gt;</TT> function which returns <TT>Behavior&nbsp;Bool </TT>instead of just <TT>Bool</TT>. The <TT>Eq</TT> and <TT>Ord</TT> classes are not lifted using instance declarations. Rather, each method is individually renamed and lifted. These are the lifting functions: they transform a non-behavioral function into its behavioral counterpart: <TT><BR>
<BR>
constantB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
($*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;(a&nbsp;-&gt;&nbsp;b)&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b<BR>
lift0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
lift0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;constantB<BR>
lift1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(a&nbsp;-&gt;&nbsp;b)&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b<BR>
lift1&nbsp;f&nbsp;b1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;lift0&nbsp;f&nbsp;$*&nbsp;b1<BR>
lift2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(a&nbsp;-&gt;&nbsp;b&nbsp;-&gt;&nbsp;c)&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b&nbsp;-&gt;&nbsp;Behavior&nbsp;c<BR>
lift2&nbsp;f&nbsp;b1&nbsp;b2&nbsp;&nbsp;&nbsp;=&nbsp;lift1&nbsp;f&nbsp;b1&nbsp;$*&nbsp;b2<BR>
lift3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(a&nbsp;-&gt;&nbsp;b&nbsp;-&gt;&nbsp;c&nbsp;-&gt;&nbsp;d)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b&nbsp;-&gt;&nbsp;Behavior&nbsp;c&nbsp;-&gt;&nbsp;Behavior&nbsp;d<BR>
lift3&nbsp;f&nbsp;b1&nbsp;b2&nbsp;b3&nbsp;=&nbsp;lift2&nbsp;f&nbsp;b1&nbsp;b2&nbsp;$*&nbsp;b3<BR>
...<BR>
lift7&nbsp;&nbsp;...<BR>
<BR>
</TT>Using these functions, the definition of <TT>(&gt;*)</TT> is <TT><BR>
<BR>
(&gt;*)&nbsp;&nbsp;=&nbsp;lift2&nbsp;(&gt;)</P>
</TT><P>Many Prelude functions have been lifted in Fran via overloading: <TT><BR>
<BR>
(+)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Num&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
(*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Num&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
negate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Num&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;<BR>
abs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Num&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;<BR>
fromInteger&nbsp;::&nbsp;Num&nbsp;a&nbsp;=&gt;&nbsp;Integer&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;<BR>
fromInt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Num&nbsp;a&nbsp;=&gt;&nbsp;Int&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;<BR>
<BR>
quot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Integral&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
rem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Integral&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
div&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Integral&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
mod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Integral&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
quotRem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Integral&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Behavior&nbsp;a,&nbsp;Behavior&nbsp;a)<BR>
divMod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Integral&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Behavior&nbsp;a,&nbsp;Behavior&nbsp;a)<BR>
<BR>
fromDouble&nbsp;&nbsp;&nbsp;::&nbsp;Fractional&nbsp;a&nbsp;=&gt;&nbsp;Double&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
fromRational&nbsp;::&nbsp;Fractional&nbsp;a&nbsp;=&gt;&nbsp;Rational&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
(/)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Fractional&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
<BR>
sin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
cos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
tan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
asin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
acos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
atan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
sinh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
cosh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
tanh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
asinh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
acosh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
atanh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
pi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a<BR>
exp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
sqrt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
(**)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
logBase&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Floating&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
<BR>
</TT>These operations correspond to functions which cannot be overloaded for behaviors. The convention is to use the <TT>B</TT> suffix for vars and a <TT>*</TT> suffix for ops. <TT><BR>
<BR>
fromIntegerB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Num&nbsp;a&nbsp;=&gt;&nbsp;IntegerB&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
toRationalB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Real&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;Rational<BR>
toIntegerB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Integral&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;IntegerB<BR>
evenB,&nbsp;oddB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Integral&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;BoolB<BR>
toIntB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Integral&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;IntB<BR>
properFractionB&nbsp;&nbsp;::&nbsp;(RealFrac&nbsp;a,&nbsp;Integral&nbsp;b)&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;(b,a)<BR>
truncateB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(RealFrac&nbsp;a,&nbsp;Integral&nbsp;b)&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b<BR>
roundB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(RealFrac&nbsp;a,&nbsp;Integral&nbsp;b)&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b<BR>
ceilingB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(RealFrac&nbsp;a,&nbsp;Integral&nbsp;b)&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b<BR>
floorB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(RealFrac&nbsp;a,&nbsp;Integral&nbsp;b)&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b<BR>
(^*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(Num&nbsp;a,&nbsp;Integral&nbsp;b)&nbsp;=&gt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
(^^*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(Fractional&nbsp;a,&nbsp;Integral&nbsp;b)&nbsp;=&gt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
(==*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Eq&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;BoolB<BR>
(/=*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Eq&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;BoolB<BR>
(&lt;*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Ord&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;BoolB<BR>
(&lt;=*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Ord&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;BoolB<BR>
(&gt;=*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Ord&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;BoolB<BR>
(&gt;*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Ord&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;BoolB<BR>
cond&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;BoolB&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
notB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;BoolB&nbsp;-&gt;&nbsp;BoolB<BR>
(&amp;&amp;*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;BoolB&nbsp;-&gt;&nbsp;BoolB&nbsp;-&gt;&nbsp;BoolB<BR>
(||*)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;BoolB&nbsp;-&gt;&nbsp;BoolB&nbsp;-&gt;&nbsp;BoolB<BR>
pairB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;b&nbsp;-&gt;&nbsp;Behavior&nbsp;(a,b)<BR>
fstB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;(a,b)&nbsp;-&gt;&nbsp;Behavior&nbsp;a<BR>
sndB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;(a,b)&nbsp;-&gt;&nbsp;Behavior&nbsp;b<BR>
pairBSplit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;(a,b)&nbsp;-&gt;&nbsp;(Behavior&nbsp;a,&nbsp;Behavior&nbsp;b)<BR>
showB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;(Show&nbsp;a)&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;String<BR>
<BR>
</TT>A few list-based functions are lifted, although most of the functions in <TT>PreludeList</TT> are not lifted. <TT><BR>
<BR>
nilB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;[a]<BR>
consB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;Behavior&nbsp;[b]&nbsp;-&gt;&nbsp;Behavior&nbsp;[b]&nbsp;<BR>
headB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;[a]&nbsp;-&gt;&nbsp;Behavior&nbsp;a&nbsp;<BR>
tailB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;[a]&nbsp;-&gt;&nbsp;Behavior&nbsp;[a]&nbsp;<BR>
liftLs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;[Behavior&nbsp;a]&nbsp;-&gt;&nbsp;Behavior&nbsp;[a]</P>
</TT><P><A NAME="sect7"></A></P>
<H2>Numeric Types</H2>
<P>The numeric types and functions are available both a static values and as behaviors. Since the same name is generally used for both the static and behavioral version of a function, only the behavioral names are exported by the <TT>Fran</TT> module. If the non-behavioral functions are needed, the convention is to add <TT><BR>
<BR>
import&nbsp;qualified&nbsp;StaticTypes&nbsp;as&nbsp;S<BR>
<BR>
</TT>to the program and qualify static names with <TT>S.</TT>, as in <TT>S.origin2</TT>.</P>
<P><A NAME="sect7_1"></A></P>
<H3>Basic Numeric Types</H3>
<P>All scalar types are essentially the same in Fran. Synonyms allow type signatures to contain extra descriptive information such as <TT>Fraction</TT> for values between 0 and 1 but no explicit type conversions are required between the various scalar types. <TT><BR>
<BR>
type&nbsp;RealVal&nbsp;&nbsp;=&nbsp;Double<BR>
type&nbsp;Length&nbsp;&nbsp;&nbsp;=&nbsp;RealVal&nbsp;&nbsp;--&nbsp;non-negative<BR>
type&nbsp;Radians&nbsp;&nbsp;=&nbsp;RealVal&nbsp;&nbsp;--&nbsp;0&nbsp;..&nbsp;2pi&nbsp;(when&nbsp;generated)<BR>
type&nbsp;Fraction&nbsp;=&nbsp;RealVal&nbsp;&nbsp;--&nbsp;0&nbsp;to&nbsp;1&nbsp;(inclusive)<BR>
type&nbsp;Scalar&nbsp;&nbsp;&nbsp;=&nbsp;Double<BR>
<BR>
type&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Double<BR>
type&nbsp;DTime&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Time&nbsp;deltas,&nbsp;i.e.,&nbsp;durations<BR>
<BR>
data&nbsp;Point2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;2D&nbsp;point<BR>
data&nbsp;Vector2&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;2D&nbsp;vector<BR>
data&nbsp;Transform2&nbsp;--&nbsp;2D&nbsp;transformation<BR>
<BR>
data&nbsp;Point3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;3D&nbsp;point<BR>
data&nbsp;Vector3&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;3D&nbsp;vector<BR>
data&nbsp;Transform3&nbsp;--&nbsp;3D&nbsp;transformation<BR>
<BR>
type&nbsp;RealB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;RealVal<BR>
type&nbsp;FractionB&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Fraction<BR>
type&nbsp;RadiansB&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Radians<BR>
type&nbsp;LengthB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Length<BR>
type&nbsp;TimeB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Time<BR>
type&nbsp;IntB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Int<BR>
<BR>
type&nbsp;Point2B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Point2<BR>
type&nbsp;Vector2B&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Vector2<BR>
type&nbsp;Transform2B&nbsp;=&nbsp;Behavior&nbsp;Transform2<BR>
<BR>
type&nbsp;Point3B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Point3<BR>
type&nbsp;Vector3B&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;Vector3<BR>
type&nbsp;Transform3B&nbsp;=&nbsp;Behavior&nbsp;Transform3</P>
</TT><P><A NAME="sect7_2"></A></P>
<H3>Points and Vectors</H3>
<TT><P><BR>
<BR>
origin2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
point2XY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Point2B<BR>
point2Polar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;LengthB&nbsp;&nbsp;-&gt;&nbsp;RadiansB&nbsp;-&gt;&nbsp;Point2B<BR>
point2XYCoords&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;(RealB, RealB)<BR>
point2PolarCoords&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;(RealB, RealB)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
distance2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;LengthB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
distance2Squared&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;LengthB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
linearInterpolate2&nbsp;&nbsp;::&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Point2B&nbsp;&nbsp;<BR>
(.+^)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;Vector2B&nbsp;-&gt;&nbsp;Point2B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
(.-^)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;Vector2B&nbsp;-&gt;&nbsp;Point2B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
(.-.)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;Point2B&nbsp;&nbsp;-&gt;&nbsp;Vector2B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
<BR>
origin3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point3B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
point3XYZ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Point3B<BR>
point3XYZCoords&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;(RealB, RealB, RealB)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
distance3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;LengthB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
distance3Squared&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;LengthB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
linearInterpolate3&nbsp;&nbsp;::&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Point3B&nbsp;&nbsp;<BR>
(.+^#)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;Vector3B&nbsp;-&gt;&nbsp;Point3B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
(.-^#)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;Vector3B&nbsp;-&gt;&nbsp;Point3B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
(.-.#)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;Point3B&nbsp;&nbsp;-&gt;&nbsp;Vector3B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
<BR>
xVector2,&nbsp;yVector2&nbsp;::&nbsp;Vector2B&nbsp;&nbsp;&nbsp;--&nbsp;unit&nbsp;vectors<BR>
vector2XY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Vector2B<BR>
vector2Polar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Vector2B<BR>
vector2XYCoords&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Vector2B&nbsp;-&gt;&nbsp;(RealB, RealB)<BR>
vector2PolarCoords&nbsp;::&nbsp;Vector2B&nbsp;-&gt;&nbsp;(RealB, RealB) <BR>
instance&nbsp;Num&nbsp;Vector2&nbsp;--&nbsp;fromInteger,&nbsp;*&nbsp;not&nbsp;allowed<BR>
<BR>
xVector3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Vector3B&nbsp;&nbsp;&nbsp;--&nbsp;unit&nbsp;vector<BR>
yVector3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Vector3B&nbsp;&nbsp;&nbsp;--&nbsp;unit&nbsp;vector<BR>
zVector3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Vector3B&nbsp;&nbsp;&nbsp;--&nbsp;unit&nbsp;vector<BR>
vector3XYZ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Vector3B<BR>
vector3XYZCoords&nbsp;&nbsp;&nbsp;::&nbsp;Vector3B&nbsp;-&gt;&nbsp;(RealB, RealB, RealB)<BR>
vector3Spherical&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;Vector3B<BR>
vector3PolarCoords&nbsp;::&nbsp;Vector3B&nbsp;-&gt;&nbsp;(RealB, RealB, RealB)<BR>
instance&nbsp;Num&nbsp;Vector3&nbsp;--&nbsp;fromInteger,&nbsp;*&nbsp;not&nbsp;allowed<BR>
<BR>
</TT>Note that vectors and points have distinct types. You cannot use <TT>+</TT> to add a point to a vector. Vectors are a member of the <TT>Num</TT> class while points are not; thus <TT>+</TT> works with vectors but not points. Although it is in class <TT>Num</TT>, the <TT>*</TT> operator cannot be used for vectors. </P>
<P>Read the `<TT>.</TT>' in the operators above as `point' and `<TT>^</TT>' as `vector'. Thus <TT>.+^</TT> means `point plus vector'. <A NAME="sect7_3"></A></P>
<H3>Vector Spaces</H3>
<TT><P><BR>
<BR>
zeroVector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;VectorSpace&nbsp;v&nbsp;=&gt;&nbsp;Behavior&nbsp;v<BR>
(*^)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;VectorSpace&nbsp;v&nbsp;=&gt;&nbsp;ScalarB&nbsp;-&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;Behavior&nbsp;v<BR>
(^/)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;VectorSpace&nbsp;v&nbsp;=&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;ScalarB&nbsp;-&gt;&nbsp;Behavior&nbsp;v<BR>
(^+^),(^-^)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;VectorSpace&nbsp;v&nbsp;=&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;Behavior&nbsp;v<BR>
dot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;VectorSpace&nbsp;v&nbsp;=&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;ScalarB<BR>
magnitude&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;VectorSpace&nbsp;v&nbsp;=&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;ScalarB<BR>
magnitudeSquared&nbsp;::&nbsp;VectorSpace&nbsp;v&nbsp;=&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;ScalarB<BR>
normalize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;VectorSpace&nbsp;v&nbsp;=&gt;&nbsp;Behavior&nbsp;v&nbsp;-&gt;&nbsp;Behavior&nbsp;v<BR>
<BR>
instance&nbsp;VectorSpace&nbsp;Double<BR>
instance&nbsp;VectorSpace&nbsp;Float<BR>
instance&nbsp;VectorSpace&nbsp;Vector2<BR>
instance&nbsp;VectorSpace&nbsp;Vector3</P>
</TT><P><A NAME="sect7_4"></A></P>
<H3>Transformations</H3>
<P>The types <TT>Transformation2B</TT> and <TT>Transformation3B</TT> represent geometric transformation on images, points, or vectors. The basic transformations are translation, rotation, and scaling. Complex transformations are created by composing basic transformations. The class <TT>Transformable2</TT> contains 2-D transformable objects.</P>
<P>These are the transformation operations: <TT><BR>
<BR>
class&nbsp;Tranformable2B&nbsp;a&nbsp;where<BR>
&nbsp;&nbsp;&nbsp;(*%)&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Transform2B&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;a&nbsp;&nbsp;&nbsp;--&nbsp;Applies&nbsp;a&nbsp;transform<BR>
<BR>
identity2&nbsp;&nbsp;::&nbsp;Transform2B<BR>
translate2&nbsp;::&nbsp;Vector2B&nbsp;-&gt;&nbsp;Transform2B<BR>
rotate2&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;Transform2B<BR>
compose2&nbsp;&nbsp;&nbsp;::&nbsp;Transform2B&nbsp;-&gt;&nbsp;Transform2B&nbsp;-&gt;&nbsp;Transform2B<BR>
inverse2&nbsp;&nbsp;&nbsp;::&nbsp;Transform2B&nbsp;-&gt;&nbsp;Transform2B<BR>
uscale2&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;Transform2B&nbsp;&nbsp;--&nbsp;only&nbsp;uniform&nbsp;scaling<BR>
<BR>
instance&nbsp;Transformable2B&nbsp;Point2B<BR>
instance&nbsp;Transformable2B&nbsp;Vector2B<BR>
<BR>
 <BR>
</TT><FONT FACE="Courier New" SIZE=2>identity3  :: Transform3B<BR>
translate3 :: Vector3B -&gt; Transform3B<BR>
rotate3    :: Vector3B -&gt; RealB -&gt; Transform3B<BR>
scale3     :: Vector3B -&gt; Transform3B<BR>
compose3   :: Transform3B -&gt; Transform3B -&gt; Transform3B<BR>
uscale3    :: RealB -&gt; Transform3B</FONT><TT><BR>
<BR>
class&nbsp;Tranformable3B&nbsp;a&nbsp;where<BR>
&nbsp;&nbsp;&nbsp;(**%)&nbsp;&nbsp;::&nbsp;Transform3B&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;a&nbsp;&nbsp;&nbsp;<BR>
<BR>
</TT>A transformation which doubles the size of an object and then rotates it 90 degrees would be <TT>rotate2&nbsp;(pi/2)&nbsp;`compose2`&nbsp;uscale2&nbsp;2</TT>. Note that the first transform applied is the one on the right, as with Haskell's function composition operator <TT>(.)</TT>.</P>
<H2><A NAME="sect8"></A>Rendered Objects</H2>
<P>Fran is capable of rendering 2-D images, 3-D images, and sounds. </P>
<H3><A NAME="sect8_1"></A>Fonts</H3>
<P>Fonts are defined as follows: <TT><BR>
data&nbsp;Font&nbsp;&nbsp;&nbsp;=&nbsp;Font&nbsp;Family&nbsp;Bool&nbsp;Bool&nbsp;--&nbsp;family&nbsp;isBold&nbsp;isItalic<BR>
data&nbsp;Family&nbsp;=&nbsp;System&nbsp;|&nbsp;TimesRoman&nbsp;|&nbsp;Courier&nbsp;|&nbsp;Arial&nbsp;|&nbsp;Symbol<BR>
system,&nbsp;timesRoman,&nbsp;courier,&nbsp;arial,&nbsp;symbol&nbsp;::&nbsp;Font<BR>
bold&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Font&nbsp;-&gt;&nbsp;Font<BR>
italic&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Font&nbsp;-&gt;&nbsp;Font<BR>
<BR>
data&nbsp;TextT&nbsp;&nbsp;&nbsp;=&nbsp;TextT&nbsp;Font&nbsp;String<BR>
type&nbsp;TextB&nbsp;&nbsp;&nbsp;=&nbsp;Behavior&nbsp;TextT<BR>
<BR>
simpleText&nbsp;&nbsp;&nbsp;::&nbsp;StringB&nbsp;-&gt;&nbsp;TextB<BR>
boldT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;TextB&nbsp;-&gt;&nbsp;TextB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
italicT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;TextB&nbsp;-&gt;&nbsp;TextB<BR>
textFont&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Font&nbsp;&nbsp;-&gt;&nbsp;TextB&nbsp;-&gt;&nbsp;TextB<BR>
<BR>
</TT>The <TT>simpleText</TT> function creates a text object using a default font. The other operators transform text objects by changing their font. <A NAME="sect8_2"></A></P>
<H3>Colors</H3>
<P>These functions define Fran colors: <TT><BR>
<BR>
colorRGB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp; -&gt;&nbsp;RealB&nbsp; -&gt;&nbsp;RealB&nbsp; -&gt;&nbsp;ColorB<BR>
colorHSL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp; -&gt;&nbsp;RealB&nbsp; -&gt;&nbsp;ColorB<BR>
colorRGBCoords&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ColorB&nbsp;-&gt;&nbsp;(RealB, RealB, RealB) <BR>
colorHSLCoords&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ColorB&nbsp;-&gt;&nbsp;(RealB, RealB, RealB)<BR>
interpolateColorRGB&nbsp;::&nbsp;ColorB&nbsp;-&gt;&nbsp;ColorB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;ColorB<BR>
interpolateColorHSL&nbsp;::&nbsp;ColorB&nbsp;-&gt;&nbsp;ColorB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;ColorB<BR>
grey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;FractionB&nbsp;-&gt;&nbsp;ColorB<BR>
<BR>
stronger&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;FractionB&nbsp;-&gt;&nbsp;ColorB&nbsp;-&gt;&nbsp;ColorB<BR>
duller&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;FractionB&nbsp;-&gt;&nbsp;ColorB&nbsp;-&gt;&nbsp;ColorB<BR>
darker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;FractionB&nbsp;-&gt;&nbsp;ColorB&nbsp;-&gt;&nbsp;ColorB<BR>
brighter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;FractionB&nbsp;-&gt;&nbsp;ColorB&nbsp;-&gt;&nbsp;ColorB<BR>
shade&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;FractionB&nbsp;-&gt;&nbsp;ColorB&nbsp;-&gt;&nbsp;ColorB<BR>
<BR>
white,&nbsp;black,&nbsp;red,&nbsp;green,&nbsp;blue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ColorB<BR>
lightBlue,&nbsp;royalBlue,&nbsp;yellow,&nbsp;brown&nbsp;::&nbsp;ColorB<BR>
<BR>
asColorRef&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ColorB&nbsp;-&gt;&nbsp;Win32.COLORREF&nbsp;<BR>
<BR>
<A NAME="sect8_3"></A></P>
</TT><H3>2-D Images</H3>
<P>The type <TT>ImageB</TT> represents reactive 2-D images. <TT><BR>
<BR>
emptyImage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ImageB<BR>
solidImage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ImageB<BR>
flipImage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;HFlipBook&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;ImageB<BR>
soundImage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;SoundB&nbsp;-&gt;&nbsp;ImageB<BR>
over&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB<BR>
overs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;[ImageB]&nbsp;-&gt;&nbsp;ImageB<BR>
withColor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ColorB&nbsp;-&gt;&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB<BR>
line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;-&gt;&nbsp;Point2B&nbsp;-&gt;&nbsp;ImageB<BR>
circle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ImageB<BR>
polygon&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;[Point2B]&nbsp;-&gt;&nbsp;ImageB<BR>
polyline&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;[Point2B]&nbsp;-&gt;&nbsp;ImageB<BR>
polyBezier&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;[Point2B]&nbsp;-&gt;&nbsp;ImageB<BR>
polygonB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;[Point2]&nbsp;-&gt;&nbsp;ImageB<BR>
polylineB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;[Point2]&nbsp;-&gt;&nbsp;ImageB<BR>
polyBezierB&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Behavior&nbsp;[Point2]&nbsp;-&gt;&nbsp;ImageB<BR>
bezier&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Point2B&nbsp;-&gt;&nbsp;Point2B&nbsp;-&gt;&nbsp;Point2B&nbsp;-&gt;&nbsp;Point2B&nbsp;-&gt;&nbsp;ImageB<BR>
textImage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;TextB&nbsp;-&gt;&nbsp;ImageB<BR>
importBitmap&nbsp;&nbsp;&nbsp;::&nbsp;String&nbsp;-&gt;&nbsp;ImageB<BR>
importBitmapWithSize&nbsp;::&nbsp;String&nbsp;-&gt;&nbsp;(ImageB,&nbsp;RealVal,&nbsp;RealVal)<BR>
<BR>
instance&nbsp;Transformable2&nbsp;ImageB<BR>
instance&nbsp;GBehavior&nbsp;ImageB&nbsp;&nbsp;<BR>
<BR>
</TT>Most of these operations are self-explanatory. The <TT>line</TT>, <TT>polyline</TT>, and <TT>bezier</TT> functions form lines and curves of a fixed system-determined width. Polygon filling uses a odd-even rule to determine whether a region is inside the polygon. All but the bitmaps are painted with a solid color, as selected by <TT>withColor</TT>. Most of these objects are centered at the origin. Text is centered just below the origin. </P>
<P>Bitmaps are centered at the origin and are displayed actual size unless scaled. Bitmaps must be stored in <TT>.bmp</TT> files. </P>
<P>Fast bitmap-based animation sequences are imported with <TT>flipImage</TT>, which takes a "flip book" and a page number behavior. </P>
<FONT FACE="Courier New" SIZE=2><P>-- Make a flip book given: surface, width and height, X,Y start pos on surface, <BR>
-- number of columns, and rows of pages<BR>
flipBook :: HDDSurface -&gt; Pixels -&gt; Pixels -&gt; Pixels -&gt; Pixels<BR>
         -&gt; Int -&gt; Int -&gt; HFlipBook</P>
</FONT><P>A "surface" is made by the following function, which takes the name of a .bmp file:</P>
<FONT FACE="Courier New" SIZE=2><P>bitmapDDSurface :: String -&gt; HDDSurface</P>
</FONT><P>Note that static imported bitmaps are a special case of flip-book animation:</P>
<FONT FACE="Courier New" SIZE=2><P>importBitmap fileName = flipImage book 0<BR>
 where<BR>
  book = flipBook surf w h 0 0 1 1</P>
</FONT><P>These are some simple utilities for 2-D images. The <TT>Transformable2B </TT>context denotes images as well as 2-D points and vectors.</P>
<TT><P>--&nbsp;Star&nbsp;figure.&nbsp;&nbsp;Arguments:&nbsp;skip&nbsp;and&nbsp;vertices.&nbsp;&nbsp;<BR>
star&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;IntB&nbsp;-&gt;&nbsp;IntB&nbsp;-&gt;&nbsp;ImageB<BR>
regularPolygon&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;IntB&nbsp;-&gt;&nbsp;ImageB<BR>
regularPolygon&nbsp;vs&nbsp;=&nbsp;&nbsp;star&nbsp;1&nbsp;vs<BR>
circle, square&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ImageB<BR>
<BR>
move&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Transformable2B&nbsp;a&nbsp;=&gt;&nbsp;Vector2B&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;a<BR>
move&nbsp;dp&nbsp;thing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;translate2&nbsp;dp&nbsp;*%&nbsp;thing<BR>
moveXY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Transformable2B&nbsp;a&nbsp;=&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;RealB&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;a<BR>
moveXY&nbsp;dx&nbsp;dy&nbsp;thing&nbsp;=&nbsp;&nbsp;move&nbsp;(vector2XY&nbsp;dx&nbsp;dy)&nbsp;thing<BR>
<BR>
stretch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;RealB&nbsp;-&gt;&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB<BR>
stretch&nbsp;sc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;(uscale2&nbsp;sc&nbsp;*%)<BR>
<BR>
--&nbsp;1.0&nbsp;=&nbsp;180&nbsp;degrees<BR>
turnLeft,&nbsp;turnRight&nbsp;::&nbsp;Transformable2B&nbsp;a&nbsp;=&gt;&nbsp;FractionB&nbsp;-&gt;&nbsp;a&nbsp;-&gt;&nbsp;a<BR>
turnLeft&nbsp;frac&nbsp;im&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;rotate2&nbsp;(frac&nbsp;*&nbsp;pi)&nbsp;*%&nbsp;im<BR>
turnRight&nbsp;frac&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;turnLeft&nbsp;(-frac)<BR>
 <BR>
stringBIm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;StringB&nbsp;-&gt;&nbsp;ImageB<BR>
stringIm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;String&nbsp; -&gt;&nbsp;ImageB<BR>
stringBIm&nbsp;str&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;textImage&nbsp;(simpleText&nbsp;str)<BR>
stringIm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;stringBIm&nbsp;.&nbsp;constantB<BR>
<BR>
showBIm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Show&nbsp;a&nbsp;=&gt;&nbsp;Behavior&nbsp;a&nbsp;-&gt;&nbsp;ImageB<BR>
showIm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Show&nbsp;a&nbsp;=&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;-&gt;&nbsp;ImageB<BR>
showBIm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;stringBIm&nbsp;.&nbsp;showB<BR>
showIm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;showBIm&nbsp;.&nbsp;constantB<BR>
<BR>
--&nbsp;Given&nbsp;an&nbsp;image&nbsp;and&nbsp;a&nbsp;canonical&nbsp;size,&nbsp;stretch&nbsp;the&nbsp;image&nbsp;uniformly&nbsp;so<BR>
--&nbsp;that&nbsp;the&nbsp;size&nbsp;maps&nbsp;exactly&nbsp;onto&nbsp;the&nbsp;window&nbsp;view&nbsp;size.<BR>
viewStretch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;Vector2B&nbsp;-&gt;&nbsp;User&nbsp;-&gt;&nbsp;ImageB&nbsp;-&gt;&nbsp;ImageB</P>
</TT><P><A NAME="sect8_4"></A></P>
<H3>3-D Geometry</H3>
<TT><P><BR>
emptyG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;GeometryB<BR>
unionG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;GeometryB&nbsp;-&gt;&nbsp;GeometryB&nbsp;-&gt;&nbsp;GeometryB<BR>
withColorG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;ColorB&nbsp;-&gt;&nbsp;GeometryB&nbsp;-&gt;&nbsp;GeometryB<BR>
ambientLightG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;GeometryB<BR>
pointLightG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;GeometryB<BR>
spotLightG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;GeometryB<BR>
directionalLightG&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;GeometryB<BR>
parallelPointLightG&nbsp;&nbsp;::&nbsp;GeometryB<BR>
--&nbsp;Import&nbsp;geometry&nbsp;from&nbsp;a&nbsp;file<BR>
importX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;::&nbsp;String&nbsp;-&gt;&nbsp;GeometryB<BR>
<BR>
instance&nbsp;&nbsp;GBehavior&nbsp;GeometryB&nbsp;&nbsp;where<BR>
instance&nbsp;&nbsp;Transformable3B&nbsp;GeometryB&nbsp;&nbsp;where</P>
</TT><P><A NAME="sect8_5"></A></P>
<H3>Sound</H3>
<FONT FACE="Courier New" SIZE=2><P>importWave :: String -&gt; SoundB       -- import from .wav file<BR>
silence :: SoundB<BR>
mix :: SoundB -&gt; SoundB -&gt; SoundB<BR>
volume :: RealB -&gt; SoundB -&gt; SoundB  -- multiply intensity<BR>
pitch :: RealB -&gt; SoundB -&gt; SoundB   -- multiply pitch<BR>
pan :: RealB -&gt; SoundB -&gt; SoundB     -- Pan, in dB.  May change</P>
<P>instance  GBehavior SoundB</P>
</FONT><P><A NAME="sect9"></A></P>
<H2>Fixities</H2>
<P>Here are all fixities defined in Fran: <TT><BR>
<BR>
infixr&nbsp;0&nbsp;&nbsp;$*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;lifted&nbsp;$&nbsp;<BR>
<BR>
infixr&nbsp;1&nbsp;`untilB`<BR>
<BR>
infixl&nbsp;2&nbsp;.|.<BR>
infixr&nbsp;2&nbsp;||*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;lifted&nbsp;||<BR>
<BR>
</TT><FONT FACE="Courier New" SIZE=2>infixl 3 ==&gt;, -=&gt;<BR>
infixl 3 `handleE`, `filterE`<BR>
infixl 3 `withElemE`, `withElemE_`<BR>
infixl 3 `withPrevE`, `withPrevE_`<BR>
infixl 3 `suchThat`, `suchThat_`<BR>
infixl 3 `afterE`, `afterE_`<BR>
</FONT><TT>infixr&nbsp;3&nbsp;&amp;&amp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;lifted&nbsp;&amp;&amp;<BR>
<BR>
infix&nbsp;4&nbsp;==*,&nbsp;&lt;*,&nbsp;&lt;=*&nbsp;,&nbsp;&gt;=*,&nbsp;&gt;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Lifted&nbsp;comparisons<BR>
infix&nbsp;4&nbsp;.+^,&nbsp;.-^,&nbsp;.-.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;point&nbsp;/&nbsp;vector&nbsp;addition/subtraction<BR>
infix&nbsp;4&nbsp;.+^#,&nbsp;.-^#,&nbsp;.-.#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;3D&nbsp;points<BR>
<BR>
<BR>
infixl&nbsp;6&nbsp;`unionG`<BR>
infixl&nbsp;6&nbsp;`over`<BR>
infixl&nbsp;6&nbsp;^+^,&nbsp;^-^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;vector&nbsp;add&nbsp;and&nbsp;subtract<BR>
<BR>
infixr&nbsp;7&nbsp;`dot`,&nbsp;*^,&nbsp;^/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;scalar&nbsp;*&nbsp;vector,&nbsp;vector&nbsp;/&nbsp;scalar<BR>
infixr&nbsp;7&nbsp;*%,&nbsp;`compose2`&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;2D&nbsp;transforms<BR>
infixr&nbsp;7&nbsp;**%,&nbsp;`compose3`&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;3D&nbsp;transforms<BR>
<BR>
infixr&nbsp;8&nbsp;&nbsp;^*,&nbsp;^^*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;lifted&nbsp;^,&nbsp;^^<BR>
</P></TT></BODY>
</HTML>
